///////////////////////////////////////////////////////////////////////////////////////////////////////
// Внешние запросы.
// Светлаков А. В., 09.02.2023
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру настроек подключения из справочника вз_НастройкиПодключения, дополненную прочими параметрами
//
// Параметры:
//  Идентификатор	 - Строка	 - Идентификатор настройки подключения
// 
// Возвращаемое значение:
// 	Структура - структура настроек подключения
//
Функция ПолучитьПараметрыПодключения(Идентификатор) Экспорт
    
	Настройки = Справочники.вз_НастройкиПодключения.ПолучитьНастройкиПодключения(Идентификатор);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ПараметрыПодключения = Новый Структура("Настройки, СтрокаПодключения, СтруктураURI, Заголовки, 
		|ИмяПользователя, ПарольПользователя, ВерсияПротокола");
	ПараметрыПодключения.Настройки = Настройки;
	ПараметрыПодключения.СтрокаПодключения = Настройки.СтрокаПодключения;
	ПараметрыПодключения.СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.СтрокаПодключения);
	ПараметрыПодключения.Заголовки = Заголовки;
	ПараметрыПодключения.ИмяПользователя = Настройки.ИмяПользователя;
	ПараметрыПодключения.ВерсияПротокола = Настройки.ВерсияПротокола;
	
	Если ЗначениеЗаполнено(ПараметрыПодключения.ИмяПользователя) Тогда
		ПараметрыПодключения.ПарольПользователя = вз_ВнешниеЗапросыСлужебный.ПолучитьПароль(Настройки.Ссылка);
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Проверяет подключение к ресурсу
//
// Параметры:
//  ПараметрыПодключения - Структура - Настройки подключения полученные методом ПолучитьПараметрыПодключения()
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса во внешней базе, структура со свойствами:
//  * Отказ - флаг ошибки
//  * ОписаниеОшибки - описание ошибки, если она произошла
//  * Данные - Строка - сообщение сервиса
//
Функция ПроверкаПодключения(ПараметрыПодключения) Экспорт

	Возврат вз_ВнешниеЗапросыСлужебный.HTTPЗапрос(ПараметрыПодключения, "/ping");
	
КонецФункции

// Создает пакет произвольного запроса для отправки во внешнюю базу
//
// Параметры:
//  ПараметрыПодключения - Структура - Настройки подключения полученные методом ПолучитьПараметрыПодключения()
//  ТекстЗапроса		 - Строка	 - Текст запроса, который будет выполнен во внешней базе
// 
// Возвращаемое значение:
//  Структура - Структура пакета запроса
//
Функция СоздатьПакетПроизвольногоЗапроса(ПараметрыПодключения, ТекстЗапроса) Экспорт
	
	Данные = Новый Структура();	
	Данные.Вставить("queryText", ТекстЗапроса);
	Данные.Вставить("params", Новый Массив);
	
	Пакет = вз_ВнешниеЗапросыСлужебный.ТранспортныйПакет(
		вз_ВнешниеЗапросыСлужебный.ТипСодержимогоПроизвольныйЗапрос(), 
		Данные);
	
	Возврат Пакет;
		
КонецФункции

// Создает пакет "запроса из справочника" для отправки во внешнюю базу
//
// Параметры:
//  ПараметрыПодключения - Структура - Настройки подключения полученные методом ПолучитьПараметрыПодключения()
//  ИдентификаторЗапроса - Строка	 - Идентификатор запроса из справочника во внешней базе, который затем будет выполнен
// 
// Возвращаемое значение:
//  Структура - Структура пакета запроса
//
Функция СоздатьПакетЗапросаИзСправочника(ПараметрыПодключения, ИдентификаторЗапроса) Экспорт
	
	Данные = Новый Структура();	
	Данные.Вставить("queryId", ИдентификаторЗапроса);
	Данные.Вставить("params", Новый Массив);
	
	Пакет = вз_ВнешниеЗапросыСлужебный.ТранспортныйПакет(
		вз_ВнешниеЗапросыСлужебный.ТипСодержимогоЗапросИзСправочника(), 
		Данные);
	
	Возврат Пакет;
		
КонецФункции

// Отправлят запрос во внешнюю базу через HTTP-сервис, возвращаяет результат
//
// Параметры:
//  ПараметрыПодключения			 - Структура - Настройки подключения полученные методом ПолучитьПараметрыПодключения()
//  Пакет							 - Структура - Структура запроса полученный методом СоздатьПакетЗапроса()
//  РезультатВВидеТаблицыЗначений	 - Булево	 - Если установлено, то результат из поля "Данные" будет преобразован в 
//												   таблицу значений, иначе будет возвращен массив структур.
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса во внешней базе, структура со свойствами:
//  * Отказ - Булево - флаг ошибки
//  * ОписаниеОшибки - Строка - описание ошибки, если она произошла
//  * Данные - Массив - результат выполнения запроса, если снят флаг РезультатВВидеТаблицыЗначений
//  - ТаблицаЗначений - результат выполнения запроса, если установлен флаг РезультатВВидеТаблицыЗначений
//
Функция ОтправитьЗапрос(ПараметрыПодключения, Пакет, РезультатВВидеТаблицыЗначений = Ложь) Экспорт
	
	Пакет = вз_ВнешниеЗапросыСлужебный.ПонизитьВерсиюТранспортногоПакета(Пакет, ПараметрыПодключения.ВерсияПротокола);
	ТелоЗапроса = вз_ВнешниеЗапросыСлужебный.ОбъектВJSON(Пакет);
	ОтветJSON = вз_ВнешниеЗапросыСлужебный.HTTPЗапрос(ПараметрыПодключения, "/get", ТелоЗапроса);
	
	ОтветПакет = вз_ВнешниеЗапросыСлужебный.ОбъектИзJSON(ОтветJSON);
	вз_ВнешниеЗапросыСлужебный.ПроверитьТранспортныйПакет(ОтветПакет);
	ОтветПакет = вз_ВнешниеЗапросыСлужебный.ОбновитьТранспортныйПакет(ОтветПакет);
	
	Результат = ПодготовитьРезультат(ОтветПакет, РезультатВВидеТаблицыЗначений);
	
	Возврат Результат;
	
КонецФункции

#Область ДобавлениеПараметров

// Добавляет примитивный параметр в список параметров запроса
//
// Параметры:
//  Пакет		 - Структура				 - Пакет для отправки, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра - Строка					 - Имя параметра запроса
//  Значение	 - Булево, Строка, Число, Дата	 - Значение параметра запроса
//
Процедура ДобавитьПараметрПримитивногоТипа(Пакет, ИмяПараметра, Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		Контейнер = СоздатьКонтейнерПримитивногоТипа("bool", Значение);
		ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Контейнер = СоздатьКонтейнерПримитивногоТипа("string", Значение);
		ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);	
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Контейнер = СоздатьКонтейнерПримитивногоТипа("double", Значение);
		ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);	
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Контейнер = СоздатьКонтейнерПримитивногоТипа("date", Значение);
		ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);	
		
	КонецЕсли;
		
КонецПроцедуры

// Создает параметр с типом Перечисление и добавляет его в список параметров запроса пакета запроса
//
// Параметры:
//  Пакет				 - Структура - Пакет запроса, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра		 - Строка	 - Имя параметра запроса
//  Значение			 - Перечисление	 - Значение перечисления
//  ТипОбъекта			 - Строка		 - Тип объекта во внешней базе, например: "Перечисление.ТипыДоговоровКонтрагентов", 
//										   если не заполнено будет установлено по параметру Значение
//  ВыдаватьОшибкуПоиска - Булево		 - В случае, если не найдено значение во внешней базе будет выдано исключение
//
Процедура ДобавитьПараметрПеречисление(Пакет, ИмяПараметра, Значение, ТипОбъекта = Неопределено, 
	ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	Контейнер = СоздатьПараметрПеречисление(
		Значение, 
		ТипОбъекта, 
		ВыдаватьОшибкуПоиска);
	
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Создает параметр с типом Справочник и добавляет его в список параметров запроса пакета запроса
//
// Параметры:
//  Пакет				 - Структура - Пакет запроса, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра		 - Строка	 - Имя параметра запроса
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "Контрагенты"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Код" - поиск по ссылке, если не найден, то по коду
//  	- "Ссылка-Код-Наименование" - поиск по ссылке, если не найден, то по коду, затем наименованию
//  	- "Код" - поиск по коду
//  	- "Наименование" - поиск по наименованию с точным соответствием
//  	- "ПредопределенноеИмя" - поиск по предопределенному имени
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
//
Процедура ДобавитьПараметрСправочник(Пакет, ИмяПараметра, ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", 
	ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	Контейнер = СоздатьПараметрСправочник(
		ТипОбъекта, 
		Ссылка, 
		МетодПоиска, 
		ВыдаватьОшибкуПоиска);
	
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Создает параметр с типом Документ и добавляет его в список параметров запроса пакета запроса
//
// Параметры:
//  Пакет				 - Структура - Пакет запроса, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра		 - Строка	 - Имя параметра запроса
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "ПоступлениеТоваров"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Номер-Дата" - поиск по ссылке, если не найден, то по номеру и дате
//  	- "Номер-Дата" - поиск по номеру и дате
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
//
Процедура ДобавитьПараметрДокумент(Пакет, ИмяПараметра, ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", 
	ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	Контейнер = СоздатьПараметрДокумент(
		ТипОбъекта, 
		Ссылка, 
		МетодПоиска, 
		ВыдаватьОшибкуПоиска);
	
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Создает параметр с типом План видов характеристик его в список параметров запроса пакета запроса
//
// Параметры:
//  Пакет				 - Структура - Пакет запроса, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра		 - Строка	 - Имя параметра запроса
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "Контрагенты"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Код" - поиск по ссылке, если не найден, то по коду
//  	- "Ссылка-Код-Наименование" - поиск по ссылке, если не найден, то по коду, затем наименованию
//  	- "Код" - поиск по коду
//  	- "Наименование" - поиск по наименованию с точным соответствием
//  	- "ПредопределенноеИмя" - поиск по предопределенному имени
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
//
Процедура ДобавитьПараметрПВХ(Пакет, ИмяПараметра, ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", 
	ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	Контейнер = СоздатьПараметрПВХ(
		ТипОбъекта, 
		Ссылка, 
		МетодПоиска, 
		ВыдаватьОшибкуПоиска);
	
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Создает параметр с типом ПланСчетов и добавляет его в список параметров запроса пакета запроса
//
// Параметры:
//  Пакет				 - Структура - Пакет запроса, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра		 - Строка	 - Имя параметра запроса
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "Хозрасчетный"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Код" - поиск по ссылке, если не найден, то по коду
//  	- "Код" - поиск по коду
//  	- "ПредопределенноеИмя" - поиск по предопределенному имени
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
//
Процедура ДобавитьПараметрПланСчетов(Пакет, ИмяПараметра, ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", 
	ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	Контейнер = СоздатьПараметрПланСчетов(
		ТипОбъекта, 
		Ссылка, 
		МетодПоиска, 
		ВыдаватьОшибкуПоиска);
	
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

#КонецОбласти

#Область РучнаяРаботаСПараметрами

// Добавляет параметр в список параметров запроса
//
// Параметры:
//  Пакет		 - Структура		 - Пакет для отправки, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра - Строка			 - Имя параметра запроса
//  Контейнер	 - Структура, Массив - - Структура - Контейнер со значением параметра полученный методами:
//  * СоздатьПараметрСправочник()
//  * СоздатьПараметрДокумент()
//  * СоздатьПараметрПВХ()
//  * СоздатьПараметрСсылочногоТипа()
//  - Массив - массив структур (контейнеров) полученных методами выше
//
Процедура ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер) Экспорт

	Параметр = Новый Структура();	
	Параметр.Вставить("name", ИмяПараметра);
	Параметр.Вставить("value", Контейнер);
	
	Пакет.content.params.Add(Параметр);
	
КонецПроцедуры

// Создает контейнер параметра с типом Перечисление для добавления в список параметров запроса пакета запроса
//
// Параметры:
//  Значение			 - Перечисление	 - Значение перечисления
//  ТипОбъекта			 - Строка		 - Тип объекта во внешней базе, например: "ТипыДоговоров", 
//										   если не заполнено будет установлено по параметру Значение
//  ВыдаватьОшибкуПоиска - Булево		 - В случае, если не найдено значение во внешней базе будет выдано исключение
// 
// Возвращаемое значение:
//  Структура - контейнер параметра запроса
//
Функция СоздатьПараметрПеречисление(Значение, ТипОбъекта = Неопределено, ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	// Проверка заполнения
	Если Значение = Неопределено Тогда
		Текст = "Неверное значение при создании параметра с типом Перечисление";
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	Мета = Значение.Метаданные();
	Если НЕ Метаданные.Перечисления.Содержит(Мета) Тогда
		Текст = СтрШаблон("Неверный тип %1 при создании параметра с типом Перечисление", Мета.Имя);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	// Создаем контейнер
	ИмяПредопределенныхДанных = вз_ВнешниеЗапросыПовтИсп.ПолучитьИмяЭлементаПеречисленияПоЗначению(Значение);
	
	Если НЕ ЗначениеЗаполнено(ТипОбъекта) Тогда
		ТипОбъекта = Мета.Имя;
	КонецЕсли;
	
	Контейнер = СоздатьКонтейнерСсылочногоТипа(
		"Перечисление." + ТипОбъекта, 
		СериализоватьМетодПоиска("ПредопределенноеИмя"), 
		Неопределено, , , , ,
		ИмяПредопределенныхДанных, , ,
		ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
		
КонецФункции

// Создает контейнер параметра с типом Справочник для добавления в список параметров запроса пакета запроса
//
// Параметры:
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "Контрагенты"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Код" - поиск по ссылке, если не найден, то по коду
//  	- "Ссылка-Код-Наименование" - поиск по ссылке, если не найден, то по коду, затем наименованию
//  	- "Код" - поиск по коду
//  	- "Наименование" - поиск по наименованию с точным соответствием
//  	- "ПредопределенноеИмя" - поиск по предопределенному имени
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
// 
// Возвращаемое значение:
//   Структура - контейнер параметра запроса 
//
Функция СоздатьПараметрСправочник(ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	// Проверка заполнения
	Если Ссылка = Неопределено Тогда
		Текст = "Неверное значение при создании параметра с типом Справочник";
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	Мета = Ссылка.Метаданные();
	Если НЕ Метаданные.Справочники.Содержит(Мета) Тогда
		Текст = СтрШаблон("Неверный тип %1 при создании параметра с типом Справочник", Мета.Имя);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	ДоступныеМетодыПоиска = Новый Массив();
	ДоступныеМетодыПоиска.Добавить("Ссылка");
	ДоступныеМетодыПоиска.Добавить("Ссылка-Код");
	ДоступныеМетодыПоиска.Добавить("Ссылка-Код-Наименование");
	ДоступныеМетодыПоиска.Добавить("Код");
	ДоступныеМетодыПоиска.Добавить("Наименование");
	ДоступныеМетодыПоиска.Добавить("ПредопределенноеИмя");
	
	Если ДоступныеМетодыПоиска.Найти(МетодПоиска) = Неопределено Тогда
		Текст = СтрШаблон("Неверный метод поиска %1 при создании параметра с типом Справочник", МетодПоиска);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	// Создаем контейнер
	Контейнер = СоздатьКонтейнерСсылочногоТипа(
		"Справочник." + ТипОбъекта, 
		СериализоватьМетодПоиска(МетодПоиска),
		Строка(Ссылка.УникальныйИдентификатор()),
		Ссылка.Код,
		Ссылка.Наименование, , ,
		Ссылка.ИмяПредопределенныхДанных, , ,
		ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
		
КонецФункции

// Создает контейнер параметра с типом Документ для добавления в список параметров запроса пакета запроса
//
// Параметры:
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "ПоступлениеТоваров"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Номер-Дата" - поиск по ссылке, если не найден, то по номеру и дате
//  	- "Номер-Дата" - поиск по номеру и дате
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
// 
// Возвращаемое значение:
//   Структура - контейнер параметра запроса 
//
Функция СоздатьПараметрДокумент(ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	// Проверка заполнения
	Если Ссылка = Неопределено Тогда
		Текст = "Неверное значение при создании параметра с типом Документ";
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	Мета = Ссылка.Метаданные();
	Если НЕ Метаданные.Документы.Содержит(Мета) Тогда
		Текст = СтрШаблон("Неверный тип ссылки %1 при создании параметра с типом Документ", Мета.Имя);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	ДоступныеМетодыПоиска = Новый Массив();
	ДоступныеМетодыПоиска.Добавить("Ссылка");
	ДоступныеМетодыПоиска.Добавить("Ссылка-Номер-Дата");
	ДоступныеМетодыПоиска.Добавить("Номер-Дата");
	
	Если ДоступныеМетодыПоиска.Найти(МетодПоиска) = Неопределено Тогда
		Текст = СтрШаблон("Неверный метод поиска %1 при создании параметра с типом Документ", МетодПоиска);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	// Создаем контейнер
	Контейнер = СоздатьКонтейнерСсылочногоТипа(
		"Документ." + ТипОбъекта, 
		СериализоватьМетодПоиска(МетодПоиска),
		Строка(Ссылка.УникальныйИдентификатор()), , ,
		Ссылка.Номер,
		Ссылка.Дата, , , ,
		ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
		
КонецФункции

// Создает контейнер параметра с типом ПланВидовХарактеристик для добавления в список параметров запроса пакета запроса
//
// Параметры:
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "ВидыСубконтоХозрасчетные"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Код" - поиск по ссылке, если не найден, то по коду
//  	- "Ссылка-Код-Наименование" - поиск по ссылке, если не найден, то по коду, затем наименованию
//  	- "Код" - поиск по коду
//  	- "Наименование" - поиск по наименованию с точным соответствием
//  	- "ПредопределенноеИмя" - поиск по предопределенному имени
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
// 
// Возвращаемое значение:
//   Структура - контейнер параметра запроса 
//
Функция СоздатьПараметрПВХ(ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	// Проверка заполнения
	Если Ссылка = Неопределено Тогда
		Текст = "Неверное значение при создании параметра с типом ПланВидовХарактеристик";
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	Мета = Ссылка.Метаданные();
	Если НЕ Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
		Текст = СтрШаблон("Неверный тип ссылки %1 при создании параметра с типом ПланВидовХарактеристик", Мета.Имя);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	ДоступныеМетодыПоиска = Новый Массив();
	ДоступныеМетодыПоиска.Добавить("Ссылка");
	ДоступныеМетодыПоиска.Добавить("Ссылка-Код");
	ДоступныеМетодыПоиска.Добавить("Ссылка-Код-Наименование");
	ДоступныеМетодыПоиска.Добавить("Код");
	ДоступныеМетодыПоиска.Добавить("Наименование");
	ДоступныеМетодыПоиска.Добавить("ПредопределенноеИмя");
	
	Если ДоступныеМетодыПоиска.Найти(МетодПоиска) = Неопределено Тогда
		Текст = СтрШаблон("Неверный метод поиска %1 при создании параметра с типом План видов характеристик", МетодПоиска);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	// Создаем контейнер
	Контейнер = СоздатьКонтейнерСсылочногоТипа(
		"ПланВидовХарактеристик." + ТипОбъекта, 
		СериализоватьМетодПоиска(МетодПоиска),
		Строка(Ссылка.УникальныйИдентификатор()),
		Ссылка.Код,
		Ссылка.Наименование, , ,
		Ссылка.ИмяПредопределенныхДанных, , ,
		ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
		
КонецФункции

// Создает контейнер параметра с типом ПланСчетов для добавления в список параметров запроса пакета запроса
//
// Параметры:
//  ТипОбъекта			 - Строка	 - Тип объекта во внешней базе, например: "Хозрасчетный"
//  Ссылка				 - Ссылка	 - Параметр ссылочного типа
//  МетодПоиска			 - Строка	 - Метод поиска ссылочного параметра во внешней базе:
//  	- "Ссылка" - поиск по ссылке
//  	- "Ссылка-Код" - поиск по ссылке, если не найден, то по коду
//  	- "Код" - поиск по коду
//  	- "ПредопределенноеИмя" - поиск по предопределенному имени
//  ВыдаватьОшибкуПоиска - Булево	 - В случае, если не найдено значение во внешней базе будет выдано исключение
// 
// Возвращаемое значение:
//   Структура - контейнер параметра запроса 
//
Функция СоздатьПараметрПланСчетов(ТипОбъекта, Ссылка, МетодПоиска = "Ссылка", ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	// Проверка заполнения
	Если Ссылка = Неопределено Тогда
		Текст = "Неверное значение при создании параметра с типом ПланСчетов";
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	Мета = Ссылка.Метаданные();
	Если НЕ Метаданные.ПланыСчетов.Содержит(Мета) Тогда
		Текст = СтрШаблон("Неверный тип ссылки %1 при создании параметра с типом ПланСчетов", Мета.Имя); 
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	ДоступныеМетодыПоиска = Новый Массив();
	ДоступныеМетодыПоиска.Добавить("Ссылка");
	ДоступныеМетодыПоиска.Добавить("Ссылка-Код");
	ДоступныеМетодыПоиска.Добавить("Код");
	ДоступныеМетодыПоиска.Добавить("ПредопределенноеИмя");
	
	Если ДоступныеМетодыПоиска.Найти(МетодПоиска) = Неопределено Тогда
		Текст = СтрШаблон("Неверный метод поиска %1 при создании параметра с типом ПланСчетов", МетодПоиска);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	// Создаем контейнер
	Контейнер = СоздатьКонтейнерСсылочногоТипа(
		"ПланСчетов." + ТипОбъекта, 
		СериализоватьМетодПоиска(МетодПоиска),
		Строка(Ссылка.УникальныйИдентификатор()),
		Ссылка.Код,
		Ссылка.Наименование, , ,
		Ссылка.ИмяПредопределенныхДанных, , ,
		ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
		
КонецФункции

// Создает произвольный контейнер параметра ссылочного типа для добавления в список параметров запроса пакета запроса
//
// Параметры:
//  ТипОбъекта					 - Строка				 - Тип объекта во внешней базе, например: "Справочник.Контрагенты"
//  МетодПоиска					 - Строка				 - Метод поиска ссылочного параметра во внешней базе:
//  				- "Ссылка" - поиск по уникальному идентификатору
//  				- "Ссылка-Код" - поиск по уникальному идентификатору, если не найден, то по коду
//  				- "Ссылка-Код-Наименование" - поиск по уникальному идентификатору, если не найден, то по коду, 
//												  затем наименованию
//  				- "Код" - поиск по коду
//  				- "Наименование" - поиск по наименованию с точным соответствием
//  				- "Ссылка-Номер-Дата" - поиск по уникальному идентификатору, если не найден, то по номеру и дате
//  				- "Номер-Дата" - поиск по номеру и дате
//  				- "ПредопределенноеИмя" - поиск по предопределенному имени
//  				- "Произвольный" - выполняется код поиска указанный в параметре ИсполняемыйКодПоиска
//  				- "Ссылка-Произвольный" - поиск по уникальному идентификатору, если не найден выполняется код поиска 
//										      указанный в параметре ИсполняемыйКодПоиска
//  УникальныйИдентификатор		 - Строка				 - Уникальный идентифкатор ссылки, при наличии
//  Код							 - Строка				 - Код элемента Справочника, ПВХ или Плана счетов
//  Наименование				 - Строка				 - Наименование элемента Справочника, ПВХ или Плана счетов
//  НомерДокумента				 - Строка				 - Номер документа
//  ДатаДокумента				 - Дата					 - Дата документа
//  ИмяПредопределенныхДанных	 - Строка				 - Имя предопределенных данных (как в конфигураторе) элемента Справочника,
//														   ПВХ или Плана счетов
//  ИсполняемыйКодПоиска		 - Строка				 - программный код, исполныемый во внешней базе для произвольного 
//														   поиска ссылки (МетодПоиска="Произвольный")
//  				При исполнении кода во внешней базе доступны переменные:
//  				* Значение - Ссылка - результат поиска ссылки
//  				* Параметры - Структура, Массив, Соответствие - ПараметрыПоиска
//  				Пример: "Значение = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Параметры.ИНН)"
//  ПараметрыПоиска				 - Структура, Массив, Соответствие	 - вспомогательная коллекция примитивных значений, 
//																	   которая будет передана во внешнюю базу
//  ВыдаватьОшибкуПоиска		 - Булево							 - В случае, если не найдено значение во внешней базе 
//																	   будет выдано исключение
// 
// Возвращаемое значение:
//   Структура - контейнер параметра запроса 
//
Функция СоздатьПараметрСсылочногоТипа(ТипОбъекта, МетодПоиска, УникальныйИдентификатор = "", Код = "", 
	Наименование = "", НомерДокумента = "", ДатаДокумента = Неопределено, ИмяПредопределенныхДанных = "", 
	ИсполняемыйКодПоиска = "", ПараметрыПоиска = Неопределено, ВыдаватьОшибкуПоиска = Истина) Экспорт
	
	// Проверка заполнения
	ДоступныеТипы = Новый Массив;
	ДоступныеТипы.Добавить("Справочник");
	ДоступныеТипы.Добавить("Документ");
	ДоступныеТипы.Добавить("ПланВидовХарактеристик");
	ДоступныеТипы.Добавить("ПланСчетов");
	
	ИмяТипаСсылки = СтрЗаменить(ТипОбъекта, ".", Символы.ПС);
	ИмяТипаСсылки = СтрПолучитьСтроку(ИмяТипаСсылки, 1);
	Если ДоступныеТипы.Найти(ИмяТипаСсылки) = Неопределено Тогда
		Текст = СтрШаблон("Неверный тип объекта %1 при создании произвольного параметра", ТипОбъекта);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;	
	КонецЕсли;
	
	// Создаем контейнер
	Контейнер = СоздатьКонтейнерСсылочногоТипа(
		ТипОбъекта, 
		СериализоватьМетодПоиска(МетодПоиска),
		УникальныйИдентификатор,
		Код,
		Наименование,
		НомерДокумента,
		ДатаДокумента,
		ИмяПредопределенныхДанных,
		ИсполняемыйКодПоиска,
		ПараметрыПоиска, 
		ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
		
КонецФункции

#КонецОбласти

#Область Устаревшие

// Устарела. Создает пакет произвольного запроса для отправки во внешнюю базу
//
// Параметры:
//  ПараметрыПодключения - Структура - Настройки подключения полученные методом ПолучитьПараметрыПодключения()
//  ТекстЗапроса		 - Строка	 - Текст запроса, который будет выполнен во внешней базе
// 
// Возвращаемое значение:
//  Структура - Структура пакета запроса
//
Функция СоздатьПакетЗапроса(ПараметрыПодключения, ТекстЗапроса) Экспорт
	
	Возврат СоздатьПакетПроизвольногоЗапроса(ПараметрыПодключения, ТекстЗапроса);
		
КонецФункции

// Устарела. Следует использовать метод ДобавитьПараметрПримитивногоТипа()
// Добавляет булевый параметр в список параметров запроса 
//
// Параметры:
//  Пакет		 - Структура - Пакет для отправки, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра - Строка	 - Имя параметра запроса
//  Значение	 - Булево	 - Значение параметра запроса
//
Процедура ДобавитьПараметрБулево(Пакет, ИмяПараметра, Значение) Экспорт
	
	Контейнер = СоздатьКонтейнерПримитивногоТипа("bool", Значение);
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Устарела. Следует использовать метод ДобавитьПараметрПримитивногоТипа()
// Добавляет строковый параметр в список параметров запроса
//
// Параметры:
//  Пакет		 - Структура - Пакет для отправки, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра - Строка	 - Имя параметра запроса
//  Значение	 - Строка	 - Значение параметра запроса
//
Процедура ДобавитьПараметрСтрока(Пакет, ИмяПараметра, Значение) Экспорт
	
	Контейнер = СоздатьКонтейнерПримитивногоТипа("string", Значение);
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Устарела. Следует использовать метод ДобавитьПараметрПримитивногоТипа()
// Добавляет числовой параметр в список параметров запроса
//
// Параметры:
//  Пакет		 - Структура - Пакет для отправки, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра - Строка	 - Имя параметра запроса
//  Значение	 - Число	 - Значение параметра запроса
//
Процедура ДобавитьПараметрЧисло(Пакет, ИмяПараметра, Значение) Экспорт
	
	Контейнер = СоздатьКонтейнерПримитивногоТипа("double", Значение);
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

// Устарела. Следует использовать метод ДобавитьПараметрПримитивногоТипа()
// Добавляет параметр с типом Дата в список параметров запроса
//
// Параметры:
//  Пакет		 - Структура - Пакет для отправки, созданный методом СоздатьПакетЗапроса()
//  ИмяПараметра - Строка	 - Имя параметра запроса
//  Значение	 - Дата		 - Значение параметра запроса
//
Процедура ДобавитьПараметрДата(Пакет, ИмяПараметра, Значение) Экспорт
	
	Контейнер = СоздатьКонтейнерПримитивногоТипа("date", Значение);
	ДобавитьПараметр(Пакет, ИмяПараметра, Контейнер);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Служебные

Функция СоздатьКонтейнерПримитивногоТипа(Тип, Значение)

	Контейнер = Новый Структура();
	Контейнер.Вставить("type", Тип);
	Контейнер.Вставить("value", XMLСтрока(Значение));
	
	Возврат Контейнер; 
	
КонецФункции

Функция СоздатьКонтейнерСсылочногоТипа(ТипОбъекта, СериализованныйМетодПоиска, УИД, Код = "", Наименование = "", 
	НомерДокумента = "", ДатаДокумента = Неопределено, ИмяПредопределенныхДанных = "", ИсполняемыйКодПоиска = "", 
	ПараметрыПоиска = Неопределено, ВыдаватьОшибкуПоиска = Истина)

	Контейнер = Новый Структура();
	Контейнер.Вставить("type", "ref");
	Контейнер.Вставить("serchingMethod", СериализованныйМетодПоиска);
	Контейнер.Вставить("objectType", ТипОбъекта);
	Контейнер.Вставить("ref", УИД);
	Контейнер.Вставить("code", Код);
	Контейнер.Вставить("name", Наименование);
	Контейнер.Вставить("number", НомерДокумента);
	Контейнер.Вставить("date", ДатаДокумента);	
	Контейнер.Вставить("predefinedName", ИмяПредопределенныхДанных);
	Контейнер.Вставить("customCode", ИсполняемыйКодПоиска);
	Контейнер.Вставить("customParams", ПараметрыПоиска);
	Контейнер.Вставить("giveSearchError", ВыдаватьОшибкуПоиска);
	
	Возврат Контейнер;
	
КонецФункции

Процедура ПроверитьОшибкиHTTP(ПараметрыПодключения, HTTPОтвет)
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат;	
	КонецЕсли;
	
	ТелоЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Текст = СтрШаблон(
		"Во время подключения к внешней базе произошла ошибка. Код состояния %1. Тело ответа: %2",
		HTTPОтвет.КодСостояния,
		СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТелоЗапроса));
	
	вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		
	ВызватьИсключение Текст;
	
КонецПроцедуры

Функция ПодготовитьРезультат(ТранспортныйПакет, РезультатВВидеТаблицыЗначений = Ложь)
	
	Результат = Новый Структура("Отказ, ОписаниеОшибки, Данные");
	Результат.Отказ = ТранспортныйПакет.error;
	Результат.ОписаниеОшибки = ТранспортныйПакет.errorDescription;
	Результат.Данные = ТранспортныйПакет.content;
	
	ДесериализоватьДаты(Результат.Данные);
	
	Если НЕ Результат.Отказ
		И РезультатВВидеТаблицыЗначений 
		Тогда
		Результат.Данные = РезультатВнешнегоЗапросаВТаблицуЗначений(Результат.Данные);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВнешнегоЗапросаВТаблицуЗначений(РезультатВнешнегоЗапроса) Экспорт
	
	// Формируем структуру колонок
	СтруктураКолонок = Новый Структура;
	Для Каждого Элемент Из РезультатВнешнегоЗапроса Цикл
		Для Каждого КлючИЗначение Из Элемент Цикл
			
			ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
			Если СтруктураКолонок.Свойство(КлючИЗначение.Ключ) Тогда
				СодержитТип = СтруктураКолонок[КлючИЗначение.Ключ].Найти(ТипЗначения);
				Если СодержитТип = Неопределено Тогда
					СтруктураКолонок[КлючИЗначение.Ключ].Добавить(ТипЗначения);
				КонецЕсли;
			Иначе
				МассивДопустимыеТипы = Новый Массив;
				МассивДопустимыеТипы.Добавить(ТипЗначения);
				
				СтруктураКолонок.Вставить(КлючИЗначение.Ключ, МассивДопустимыеТипы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Создадим таблицу значений
	Таблица = Новый ТаблицаЗначений;	
	Для Каждого Колонка Из СтруктураКолонок Цикл
		Таблица.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(Колонка.Значение));		
	КонецЦикла;
	
	// Заполняем
	Для Каждого Элемент Из РезультатВнешнегоЗапроса Цикл
		Строка = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Элемент);
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

#КонецОбласти

#Область Сериализация

// Сериализут метод поиска в соответствии с протоколом обмена 
//
// Параметры:
//  МетодПоиска	 - Строка	 - Представление метода поиска на уровне данных
// 
// Возвращаемое значение:
//   - Строка - Представление метода поиска в протоколе обмена
//
Функция СериализоватьМетодПоиска(МетодПоиска)
	
	Результат = "";
	
	Если НРег(МетодПоиска) = "ссылка" Тогда
		Результат = "reference";	
		
	ИначеЕсли НРег(МетодПоиска) = "ссылка-код" Тогда
		Результат = "reference-code";
		
	ИначеЕсли НРег(МетодПоиска) = "ссылка-код-наименование" Тогда
		Результат = "reference-code-name";
		
	ИначеЕсли НРег(МетодПоиска) = "ссылка-номер-дата" Тогда
		Результат = "reference-number-date";
		
	ИначеЕсли НРег(МетодПоиска) = "код" Тогда
		Результат = "code";
		
	ИначеЕсли НРег(МетодПоиска) = "наименование" Тогда
		Результат = "name";
		
	ИначеЕсли НРег(МетодПоиска) = "номер-дата" Тогда
		Результат = "number-date";
		
	ИначеЕсли НРег(МетодПоиска) = "предопределенноеимя" Тогда
		Результат = "predefinedName";
		
	ИначеЕсли НРег(МетодПоиска) = "произвольный" Тогда
		Результат = "custom";
		
	ИначеЕсли НРег(МетодПоиска) = "ссылка-произвольный" Тогда
		Результат = "reference-custom";
		
	Иначе
		Текст = СтрШаблон("Некорректный метод поиска %1", МетодПоиска);
		вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДесериализоватьДаты(Данные)

	Если Данные = Неопределено
		ИЛИ ТипЗнч(Данные) = Тип("Строка")
		ИЛИ Данные.Количество() = 0 
		Тогда
		Возврат;
	КонецЕсли;
	
	Структура = Данные.Получить(0);
	
	Для каждого КлючИЗначение Из Структура Цикл 
		Если НЕ вз_ВнешниеЗапросыСлужебный.ЭтоДатаXML(КлючИЗначение.Значение) Тогда
			Продолжить;	
		КонецЕсли;	
		
		ИмяКолонки = КлючИЗначение.Ключ;
		Для каждого Строка Из Данные Цикл
			Строка[ИмяКолонки] = вз_ВнешниеЗапросыСлужебный.ДатаXML(Строка[ИмяКолонки]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
