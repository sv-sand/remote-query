///////////////////////////////////////////////////////////////////////////////////////////////////////
// Внешние запросы.
// Светлаков А. В., 28.07.2023
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Отправляет внешний запрос получателю
//
// Параметры:
//  ПараметрыПодключения - Структура - Настройки подключения полученные методом ПолучитьПараметрыПодключения()
//  АдресРесурса		 - Строка	 - Адрес ресурса
//  ТелоЗапроса			 - Строка	 - Тело запроса
// 
// Возвращаемое значение:
//  Строка - Тело запроса
//
Функция HTTPЗапрос(ПараметрыПодключения, АдресРесурса, ТелоЗапроса = "") Экспорт

	Соединение = Новый HTTPСоединение(
		ПараметрыПодключения.СтруктураURI.ИмяСервера, 
		80, 
		ПараметрыПодключения.ИмяПользователя, 
		ПараметрыПодключения.ПарольПользователя, , 
		300);
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыПодключения.СтруктураURI.ПутьНаСервере + "/remote-query" + АдресРесурса, 
		ПараметрыПодключения.Заголовки);
	
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);	
	КонецЕсли;
	
	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	
	ПроверитьОшибкиHTTP(ПараметрыПодключения, HTTPОтвет);
	
	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	
КонецФункции

// Записывает событие в журнал регистрации
//
// Параметры:
//  Текст		 - Строка				 - Текст события
//  Уровень		 - УровеньЖурналаРегистрации - Уровень события журнала регистрации
//  ВидЗапроса	 - Строка					 - Вид запроса для детализации информации, например: "Входящий", "Исходящий"
//
Процедура ЗаписатьВЖурнал(Текст, Уровень, ВидЗапроса) Экспорт

	ЗаписьЖурналаРегистрации("БиблиотекаИнтеграции.ВнешниеЗапросы." + ВидЗапроса, Уровень, , , Текст);
	
КонецПроцедуры

// Сохраняет пароль настройки подключаения в безопасном хранилище
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.вз_НастройкиПодключения	 - Настрока для которой требуется сохранить пароль
//  Пароль				 - Строка									 - Пароль
//
Процедура СохранитьПароль(НастройкаПодключения, Пароль) Экспорт
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаПодключения, Пароль);
		
КонецПроцедуры

// Возвращает пароль настройки подключения из безопасного хранилища
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.вз_НастройкиПодключения	 - Настрока для которой требуется сохранить пароль
// 
// Возвращаемое значение:
//  Строка - Пароль
//
Функция ПолучитьПароль(НастройкаПодключения) Экспорт

	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаПодключения);
	
КонецФункции

// Формирует описание текущих версий подсистемы
// 
// Возвращаемое значение:
//  Строка - Описание
//
Функция ОписаниеТекущихВерсийПодсистемы() Экспорт
	
	Описание = СтрШаблон("Текущая версия подсистемы: %1, версия протокола обмена: %2",
		вз_ВнешниеЗапросы.ВерсияПодсистемы(),
		вз_ВнешниеЗапросы.ВерсияПротокола());
	
	Возврат Описание;
		
КонецФункции

#Область Транспорт

// Создает транпортный пакет
//
// Параметры:
//  ТипСодержимого	 - Строка	 - Тип содержимого поля content, используется начиная с версии протокола 0.3
//  Данные			 - Структура - Сериализуемое содержимое пакета
//  ВерсияПротокола	 - Строка	 - Версия протокола пакета, если не указана, то последняя поддерживаемая
// 
// Возвращаемое значение:
//  Структура - Транспортный пакет
//
Функция ТранспортныйПакет(ТипСодержимого = Неопределено, Данные = Неопределено) Экспорт

	Пакет = ТранспортныйПакет_03();
	
	Пакет.sender = СтрокаСоединенияИнформационнойБазы();
	Пакет.user = Строка(Пользователи.ТекущийПользователь());
	Пакет.error = Ложь;          				
	Пакет.errorDescription = ""; 	
	Пакет.contentType = ТипСодержимого;
	Пакет.content = Данные;
	
	Возврат Пакет;
	
КонецФункции

// Валидирует транспортный пакет
//
// Параметры:
//  Пакет	 - Структура - Транспортный пакет
//
Процедура ПроверитьТранспортныйПакет(Пакет) Экспорт

	Если Пакет = Неопределено Тогда
		ВызватьИсключение "Пустой транспортный пакет";
	КонецЕсли;
	
	Если ТипЗнч(Пакет) <> Тип("Структура") Тогда
		ВызватьИсключение "Транспортный пакет должен быть структурой";	
	КонецЕсли;
	
	ПроверитьРеквизитТранспортногоПакета(Пакет, "ver", Истина);
	
	Если Пакет.ver = "0.2" Тогда
		ПроверитьТранспортныйПакет_02(Пакет);
		
	ИначеЕсли Пакет.ver = "0.2.1" Тогда
		ПроверитьТранспортныйПакет_02(Пакет);
		
	ИначеЕсли Пакет.ver = "0.3" Тогда
		ПроверитьТранспортныйПакет_03(Пакет);	
		
	Иначе
		ВызватьИсключение "Неподдерживаемая версия протокола";
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует транспортный пакет из старого протокола в новый
//
// Параметры:
//  Пакет	 - Структура - Транспортный пакет старого протокола
// 
// Возвращаемое значение:
//  Структура - Транспортный пакет текущего протокола
//
Функция ОбновитьТранспортныйПакет(Пакет) Экспорт

	Если Пакет.ver = "0.2" Тогда
		НовыйПакет = ТранспортныйПакет(ТипСодержимогоПроизвольныйЗапрос(), Пакет.data);	
		НовыйПакет.error = Пакет.error;          				
		НовыйПакет.errorDescription = Пакет.errorDescription;
		
	ИначеЕсли Пакет.ver = "0.2.1" Тогда
		НовыйПакет = ТранспортныйПакет(ТипСодержимогоПроизвольныйЗапрос(), Пакет.data);	
		НовыйПакет.error = Пакет.error;          				
		НовыйПакет.errorDescription = Пакет.errorDescription; 
		
	ИначеЕсли Пакет.ver = "0.3" Тогда
		// Текущая версия, обновление не требуется	
		НовыйПакет = Пакет;
		
	Иначе
		ВызватьИсключение "Неподдерживаемая версия протокола";
	КонецЕсли;
	
	Возврат НовыйПакет;
	
КонецФункции

// Понижает версию транспортного пакета с актуальной до старой версии
//
// Параметры:
//  Пакет			 - Структура - Транспортный пакет актуальной версии
//  ВерсияПротокола	 - Строка	 - Версия старого протокола
// 
// Возвращаемое значение:
//  Структура - Старая версия транспортного пакета
//
Функция ПонизитьВерсиюТранспортногоПакета(Пакет, ВерсияПротокола) Экспорт

	Если ВерсияПротокола = "0.2" Тогда
		НовыйПакет = ТранспортныйПакет_02();
		ЗаполнитьЗначенияСвойств(НовыйПакет, Пакет, "error, errorDescription");
		НовыйПакет.data = Пакет.content;
		
	ИначеЕсли ВерсияПротокола = "0.2.1" Тогда
		НовыйПакет = ТранспортныйПакет_021();
		ЗаполнитьЗначенияСвойств(НовыйПакет, Пакет, "error, errorDescription");
		НовыйПакет.data = Пакет.content;
		
	ИначеЕсли ВерсияПротокола = "0.3" Тогда
		НовыйПакет = Пакет; // Текущая версия
		
	Иначе
		ВызватьИсключение "Неподдерживаемая версия протокола";
	КонецЕсли;
	
	Возврат НовыйПакет;	
	
КонецФункции

#КонецОбласти

#Область Сериализация

// Десериализует объект данных из строки JSON
//
// Параметры:
//  JSON - Строка	 - Строка с данными
// 
// Возвращаемое значение:
//   - Структура, Массив, Соответствие - Объект с примитивными типами данных
//
Функция ОбъектИзJSON(JSON) Экспорт
	
	Если НЕ ЗначениеЗаполнено(JSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Данные;
	
КонецФункции

// Сериализует объект данных в строку JSON
//
// Параметры:
//  Объект	 - Структура, Массив, Соответствие	 - с примитивными типами данных
// 
// Возвращаемое значение:
//   - Строка	 - Строка с данными
//
Функция ОбъектВJSON(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат "";	
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписатьJSON(ЗаписьJSON, Объект);	
	
	Возврат ЗаписьJSON.Закрыть();
		
КонецФункции

// Определяет, что строка - это дата XML
//
// Параметры:
//  Строка	 - Строка	 - Исходная строка, содержащая дату или другое значение
// 
// Возвращаемое значение:
//  Булево - Истина, если строка содержит дату
//
Функция ЭтоДатаXML(Строка) Экспорт
	
	Если НЕ (СтрДлина(Строка) = 19 
		И Сред(Строка, 5, 1) = "-" 
		И Сред(Строка, 8, 1) = "-" 
		И Сред(Строка, 11, 1) = "T" 
		И Сред(Строка, 14, 1) = ":" 
		И Сред(Строка, 17, 1) = ":") 
		Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Год = Сред(Строка, 1, 4);	
	Месяц = Сред(Строка, 6, 2);	
	День = Сред(Строка, 9, 2);	
	Час = Сред(Строка, 12, 2);	
	Минута = Сред(Строка, 15, 2);	
	Секунда = Сред(Строка, 18, 2);
	
	Возврат СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Год + Месяц + День + Час + Минута + Секунда);		
	
КонецФункции

// Преобразует строку содержащую дату XML в дату
//
// Параметры:
//  Строка	 - Строка	 - Строка содержащая дату
// 
// Возвращаемое значение:
//  Дата - Дата
//
Функция ДатаXML(Строка) Экспорт

	ЗначениеПоУмолчанию = Дата(1, 1, 1);
	Если НЕ ЭтоДатаXML(Строка) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Попытка
		Значение = XMLЗначение(Тип("Дата"), Строка);
	Исключение
	    Возврат ЗначениеПоУмолчанию;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область Константы

// Тип содержимого транспортного пакета с произвольным запросом
// 
// Возвращаемое значение:
// Строка  - Тип запроса
//
Функция ТипСодержимогоПроизвольныйЗапрос() Экспорт
	Возврат "custom";		
КонецФункции

// Тип содержимого транспортного пакета с запросом из справочника
// 
// Возвращаемое значение:
// Строка  - Тип запроса
//
Функция ТипСодержимогоЗапросИзСправочника() Экспорт
	Возврат "fromСatalog";		
КонецФункции

// Тип содержимого транспортного пакета с результатом запроса
// 
// Возвращаемое значение:
// Строка  - Тип запроса
//
Функция ТипСодержимогоРезультатЗапроса() Экспорт
	Возврат "result";		
КонецФункции

// Использовать внешние запросы из справочника
// 
// Возвращаемое значение:
// Булево - Истина, если настройка включена 
//
Функция ИспользоватьВнешниеЗапросыИзСправочника() Экспорт
	Возврат Константы.вз_ИспользоватьВнешниеЗапросыИзСправочника.Получить();		
КонецФункции

// Использовать произвольные внешние запросы
// 
// Возвращаемое значение:
// Булево - Истина, если настройка включена
//
Функция ИспользоватьПроизвольныеВнешниеЗапросы() Экспорт
	Возврат Константы.вз_ИспользоватьПроизвольныеВнешниеЗапросы.Получить();		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область HTTPСоединение

Процедура ПроверитьОшибкиHTTP(ПараметрыПодключения, HTTPОтвет)
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат;	
	КонецЕсли;
	
	ТелоЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Текст = СтрШаблон(
		"Во время подключения к внешней базе произошла ошибка. Код состояния %1. Тело ответа: %2",
		HTTPОтвет.КодСостояния,
		СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТелоЗапроса));
	
	вз_ВнешниеЗапросыСлужебный.ЗаписатьВЖурнал(Текст, УровеньЖурналаРегистрации.Ошибка, "Исходящий");
		
	ВызватьИсключение Текст;
	
КонецПроцедуры

#КонецОбласти

#Область РеализацияВерсийПротокола

Функция ТранспортныйПакет_02()

	Пакет = Новый Структура();
	Пакет.Вставить("ver", "0.2");
	Пакет.Вставить("error", Ложь);          				
	Пакет.Вставить("errorDescription", ""); 	
	Пакет.Вставить("data", Неопределено);
	
	Возврат Пакет;
	
КонецФункции

Функция ТранспортныйПакет_021()

	Пакет = Новый Структура();
	Пакет.Вставить("ver", "0.2.1");
	Пакет.Вставить("error", Ложь);          				
	Пакет.Вставить("errorDescription", ""); 	
	Пакет.Вставить("data", Неопределено);
	
	Возврат Пакет;
	
КонецФункции

Функция ТранспортныйПакет_03()

	Пакет = Новый Структура();
	Пакет.Вставить("ver", "0.3");
	Пакет.Вставить("sender", "");
	Пакет.Вставить("user", "");
	Пакет.Вставить("error", Ложь);          				
	Пакет.Вставить("errorDescription", ""); 	
	Пакет.Вставить("contentType", "");
	Пакет.Вставить("content", Неопределено);
	
	Возврат Пакет;
	
КонецФункции

Процедура ПроверитьТранспортныйПакет_02(Пакет)

	ПроверитьРеквизитТранспортногоПакета(Пакет, "error");
	ПроверитьРеквизитТранспортногоПакета(Пакет, "errorDescription");
	ПроверитьРеквизитТранспортногоПакета(Пакет, "data");
	
КонецПроцедуры

Процедура ПроверитьТранспортныйПакет_03(Пакет)

	ПроверитьРеквизитТранспортногоПакета(Пакет, "sender", Истина);
	ПроверитьРеквизитТранспортногоПакета(Пакет, "user", Истина);
	ПроверитьРеквизитТранспортногоПакета(Пакет, "error");
	ПроверитьРеквизитТранспортногоПакета(Пакет, "errorDescription");
	ПроверитьРеквизитТранспортногоПакета(Пакет, "contentType", Истина);
	ПроверитьРеквизитТранспортногоПакета(Пакет, "content");
	
КонецПроцедуры

Процедура ПроверитьРеквизитТранспортногоПакета(Пакет, ИмяРеквизита, ПроверятьЗаполнение = Ложь)

	Значение = Неопределено;
	Если НЕ Пакет.Свойство(ИмяРеквизита, Значение) Тогда
		ВызватьИсключение СтрШаблон("Отсутствует обязательный реквизит транспортного пакета '%1'", ИмяРеквизита);	
	КонецЕсли;
	
	Если ПроверятьЗаполнение
		И НЕ ЗначениеЗаполнено(Значение)
		Тогда
		ВызватьИсключение СтрШаблон("Не заполнен обязательный реквизит транспортного пакета '%1'", ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
