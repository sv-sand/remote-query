
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("ВЗ.Исходящие.Клиент 0.2 (мок)")
	
		// Исключения
		.ДобавитьТест("Пинг", "Пинг")
		.ДобавитьТест("ОшибкаПустойЗапрос", "Ошибка пустой запрос")
	
		.ДобавитьТест("ОшибкаНеверныйТипОбъекта", "Ошибка НеверныйТипОбъекта (Справочник)")		
		.ДобавитьТест("ОшибкаПоиска", "Ошибка поиска (Справочник)")
		.ДобавитьТест("ИгнорОшибкиПоиска", "Игнор ошибки поиска (Справочник)")
		.ДобавитьТест("ОшибкаЗначениеНеопределено", "Ошибка ЗначениеНеопределено (Справочник)")
	
		// Стандартные ситуации	
		.ДобавитьТест("ТестПримитивныхПараметров", "Булево").СПараметрами(Истина)	
		.ДобавитьТест("ТестПримитивныхПараметров", "Строка").СПараметрами("Тестовая строка")	
		.ДобавитьТест("ТестПримитивныхПараметров", "Число").СПараметрами(3.14)	
		.ДобавитьТест("ТестПримитивныхПараметров", "Дата").СПараметрами(ТекущаяДата())
	
		.ДобавитьТест("ТестПеречисление", "Перечисление: успешный поиск");

	//ЮТТесты.ДобавитьТест("ТестСправочникПоискПоУмолчанию", "Справочник: поиск по умолчанию");
	//ЮТТесты.ДобавитьТест("ТестСправочникПоискСсылка", "Справочник: поиск Ссылка");
	//ЮТТесты.ДобавитьТест("ТестСправочникПоискКод", "Справочник: поиск Код");
	//ЮТТесты.ДобавитьТест("ТестСправочникПоискНаименование", "Справочник: поиск Наименование");
	//ЮТТесты.ДобавитьТест("ТестСправочникПоискПредопределенноеИмя", "Справочник: поиск ПредопределенноеИмя");
	//ЮТТесты.ДобавитьТест("ТестСправочникПоискСсылкаКодНаименование", "Справочник: поиск Ссылка-Код-Наименование");
	//ЮТТесты.ДобавитьТест("ТестСправочникОшибкаПоискаСсылкаКодНаименование", "Справочник: ошибка поиска Ссылка-Код-Наименование");
	//
	//ЮТТесты.ДобавитьТест("ТестДокументПоискПоУмолчанию", "Документ: поиск по умолчанию");
	//ЮТТесты.ДобавитьТест("ТестДокументПоискСсылка", "Документ: поиск Ссылка");
	//ЮТТесты.ДобавитьТест("ТестДокументПоискНомерДата", "Документ: поиск Номер-Дата");
	//
	//// Прочие ситуации
	//ЮТТесты.ДобавитьТест("ТестПроизвольныйПараметр", "Произвольный параметр");
	//ЮТТесты.ДобавитьТест("ТестРезультатЗапросаВТаблицуЗначений", "Результат запроса в таблицу значений");
	//ЮТТесты.ДобавитьТест("ТестПолучитьКешСсылок", "Получить кеш ссылок");
	
КонецПроцедуры

#Область НегативныеТесты

Процедура Пинг() Экспорт

	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеПинг())
		.Прогон();	
	
	// Запрос
	Параметры = ПараметрыПодключения();
	Результат = вз_ВнешниеЗапросыИсходящие.ПроверкаПодключения(Параметры);
	
	// Тесты
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Строка", "Проверка типа")
		.Равно(СообщениеПинг(), "Мокированный результат");

КонецПроцедуры

Процедура ОшибкаПустойЗапрос() Экспорт

	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеПустойЗапрос())
		.Прогон();	
	
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, "");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
		.Содержит("Ожидается выражение ""ВЫБРАТЬ""", "Проверка текста ошибки");

КонецПроцедуры
	
Процедура ОшибкаНеверныйТипОбъекта() Экспорт

	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеНеверныйТипОбъекта())
		.Прогон()
	;	
	
	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", "_Демо_Контрагенты_Неправильный", Эталон, , Ложь);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Неизвестный тип объекта метаданных", "Проверка текста ошибки");
		
КонецПроцедуры

Процедура ОшибкаПоиска() Экспорт

	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеОшибкаПоиска())
		.Прогон()
	;	
	
	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, ИдентификаторМетаданных.ЗначениеПустойСсылки);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не удалось найти объект", "Проверка текста ошибки");
		
КонецПроцедуры

Процедура ИгнорОшибкиПоиска() Экспорт

	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеИгнорОшибкиПоиска())
		.Прогон()
	;	
	
	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, ИдентификаторМетаданных.ЗначениеПустойСсылки, , Ложь);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 0);
		
КонецПроцедуры

Процедура ОшибкаЗначениеНеопределено() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, "");

	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Пакет);
	ПараметрыМетода.Добавить("Ссылка");
	ПараметрыМетода.Добавить(ИдентификаторМетаданных.Имя);
	ПараметрыМетода.Добавить(Неопределено);
	
	ЮТест.ОжидаетЧто(Неопределено)
		.Метод("вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник", ПараметрыМетода)
		.ВыбрасываетИсключение("Неверное значение при создании параметра", "Проверка вывода исключения");	
	
КонецПроцедуры

#КонецОбласти

#Область ПозитивныеТесты

Процедура ТестПримитивныхПараметров(Эталон) Экспорт
	
	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеТестПримитивныхПараметров(Эталон))
		.Прогон()
	;	
	
	ТекстЗапроса = ПолучитьТекстЗапросаЗначения();
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Значение", Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьЗначениеЕдинственнойСтроки(Результат, Эталон);
		
КонецПроцедуры

#Область Перечисления

Процедура ТестПеречисление() Экспорт

	Мокито.Обучение(вз_ВнешниеЗапросыСлужебный)
		.Когда("HTTPЗапрос").Вернуть(СообщениеПеречисление())
		.Прогон()
	;	
	
	Эталон = ПолучитьТестовоеПеречисление();
	ТекстЗапроса = ПолучитьТекстЗапросаЗначения();
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПеречисление(Пакет, "Значение", Эталон, Эталон.Метаданные().Имя);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("Значение", "Наличие свойства УИД")
			.Равно(XMLСтрока(Эталон), "Проверка значения");
		
КонецПроцедуры

#КонецОбласти

#Область Справочники

Процедура ТестСправочникПоискПоУмолчанию() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискСсылка() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискКод() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Код");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(ПараметрыПодключения(), Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискНаименование() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Наименование");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискПредопределенноеИмя() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "ПредопределенноеИмя");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры
		
Процедура ТестСправочникПоискСсылкаКодНаименование() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка-Код-Наименование");
	
	Пакет.data.params[0].value.ref = "0" + Сред(Пакет.data.params[0].value.ref, 2);
	Пакет.data.params[0].value.code = "_" + Сред(Пакет.data.params[0].value.ref, 2);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникОшибкаПоискаСсылкаКодНаименование() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка-Код-Наименование");
	
	param = Пакет.data.params[0].value;
	param.ref = "0" + Сред(param.ref, 2);
	param.code = "_" + Сред(param.code, 2);
	param.name = "_" + Сред(param.name, 2);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не удалось найти объект", "Проверка текста ошибки")
			.Содержит("по ссылке", "Проверка текста ошибки")
			.Содержит("коду", "Проверка текста ошибки")
			.Содержит("и наименованию", "Проверка текста ошибки");
		
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ТестДокументПоискПоУмолчанию() Экспорт

	Эталон = ПолучитьТестовыйДокумент();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрДокумент(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестДокументПоискСсылка() Экспорт

	Эталон = ПолучитьТестовыйДокумент();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрДокумент(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестДокументПоискНомерДата() Экспорт

	Эталон = ПолучитьТестовыйДокумент();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрДокумент(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Номер-Дата");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ТестПроизвольныйПараметр() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Код", Эталон.Код + "_");
	ПараметрыПоиска.Вставить("Наименование", Эталон.Наименование);
	
	ИсполняемыйКод = СтрШаблон(
		"Значение = Справочники.%1.НайтиПоКоду(Параметры.Код);
		|Если НЕ ЗначениеЗаполнено(Значение) Тогда
		|	Значение = Справочники.%1.НайтиПоНаименованию(Параметры.Наименование); 	
		|КонецЕсли;",
		ИдентификаторМетаданных.Имя
	);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса); 
	
	Параметр = вз_ВнешниеЗапросыИсходящие.СоздатьПараметрСсылочногоТипа(
		ИдентификаторМетаданных.ПолноеИмя, "Произвольный", , , , , , , ИсполняемыйКод, ПараметрыПоиска
	);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметр(Пакет, "Ссылка", Параметр);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестРезультатЗапросаВТаблицуЗначений() Экспорт

	ЭталонБулево = Истина;
	ЭталонСтрока = "Тестовая строка";
	ЭталонЧисло = 3.123456789;
	ЭталонДата = ТекущаяДата();
	
	ЭталонСсылка = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЭталонСсылка));
	
	// Формируем текст запроса
	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Запрос.Операторы.Получить(0);
	
	СхемыЗапросов.ДобавитьИсточник(Оператор, ИдентификаторМетаданных.ПолноеИмя, "Объект");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Объект.Ссылка)", "УИД");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Булево", "Булево");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Строка", "Строка");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Число", "Число");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Дата", "Дата");
	
	СхемыЗапросов.ДобавитьУсловиеВОператор(Оператор, "Объект.Ссылка = &Ссылка");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапроса(Параметры, ТекстЗапроса);
	
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, ЭталонСсылка);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Булево", ЭталонБулево);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Строка", ЭталонСтрока);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Число", ЭталонЧисло);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Дата", ЭталонДата);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет, Истина);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	
	ЮТест.ОжидаетЧто(Результат.Данные)
		.ИмеетТип("ТаблицаЗначений", "Проверка типа 'Результат'")
			.ИмеетДлину(1, "Проверка количества элементов массива 'Данные'");
			
	Строка = Результат.Данные.Получить(0);
	
	ЮТест.ОжидаетЧто(Строка, "Проверка значения ссылки")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(ЭталонСсылка.УникальныйИдентификатор()), "Проверка значения ссылки");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Булево")
		.Свойство("Булево", "Наличие свойства Булево")
			.Равно(ЭталонБулево, "Проверка значения Булево");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Строка")
		.Свойство("Строка", "Наличие свойства Строка")
			.Равно(ЭталонСтрока, "Проверка значения Строка");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Число")
		.Свойство("Число", "Наличие свойства Число")
			.Равно(ЭталонЧисло, "Проверка значения Число");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Дата")
		.Свойство("Дата", "Наличие свойства Дата")
			.Равно(ЭталонДата, "Проверка значения Дата");
		
КонецПроцедуры

Процедура ТестПолучитьКешСсылок() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	УникальныйИдентификатор(Объект.Ссылка) КАК УИД,
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник._Демо_Контрагенты КАК Объект";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Кеш = вз_ВнешниеЗапросы.ПолучитьКешСсылок("Справочник._Демо_Контрагенты", Таблица.ВыгрузитьКолонку("УИД"));
	
	Для каждого Строка Из Таблица Цикл
		ЮТест.ОжидаетЧто(Строка.Ссылка)
			.Равно(Кеш.Получить(Строка.УИД), "Проверка ссылки " + Строка.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область События

Процедура Инициализация() Экспорт
	
КонецПроцедуры

#Область СобытияИсполненияТестов

Процедура ПередВсемиТестамиМодуля() Экспорт

КонецПроцедуры

Процедура ПередТестовымНабором() Экспорт

КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт

КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт

КонецПроцедуры

Процедура ПослеТестовогоНабора() Экспорт

КонецПроцедуры

Процедура ПослеВсехТестовМодуля() Экспорт

КонецПроцедуры

Процедура ПередВыполнениемТестов() Экспорт

КонецПроцедуры

Процедура ПослеВыполненияТестов() Экспорт

КонецПроцедуры

#КонецОбласти

#Область СобытияЗагрузкиТестов

Процедура ПередЧтениеСценариев() Экспорт

КонецПроцедуры

Процедура ПередЧтениемСценариевМодуля() Экспорт

КонецПроцедуры

Процедура ПослеЧтенияСценариевМодуля() Экспорт

КонецПроцедуры

Процедура ПослеЧтенияСценариев() Экспорт

КонецПроцедуры

Процедура ПослеФормированияИсполняемыхНаборовТестов() Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СообщенияJSON

Функция СообщениеПинг()
	
	JSON = 
		"Successful connection!
		|Subsystem version 0.2.1
		|Protocol version 0.2";
	
	Возврат JSON;
	
КонецФункции

Функция СообщениеПустойЗапрос()
	
	JSON = 
	"{
	|""ver"": ""0.2"",
	|""Error"": true,
	|""ErrorDescription"": ""{ОбщийМодуль.вз_ВнешниеЗапросыВходящие.Модуль(135)}: Ошибка при вызове метода контекста (Выполнить): {(1, 1)}: Ожидается выражение \""ВЫБРАТЬ\"""",
	|""data"": null
	|}";
	
	Возврат JSON;
	
КонецФункции

Функция СообщениеНеверныйТипОбъекта()
	
	JSON = 
	"{
	|""ver"": ""0.2"",
	|""Error"": true,
	|""ErrorDescription"": ""Неизвестный тип объекта метаданных \""Справочник._Демо_Контрагенты_Неправильный\""."",
	|""data"": null
	|}";
	
	Возврат JSON;
	
КонецФункции

Функция СообщениеОшибкаПоиска()
	
	JSON = 
	"{
	|""ver"": ""0.2"",
	|""Error"": true,
	|""ErrorDescription"": ""{ОбщийМодуль.вз_ВнешниеЗапросыВходящие.Модуль(351)}: Не удалось найти объект Справочник._Демо_Контрагенты по ссылке 00000000-0000-0000-0000-000000000000"",
	|""data"": null
	|}";
	
	Возврат JSON;
	
КонецФункции

Функция СообщениеИгнорОшибкиПоиска()
	
	JSON = 
	"{
	|""ver"": ""0.2"",
	|""Error"": false,
	|""ErrorDescription"": """",
	|""data"": []
	|}";
	
	Возврат JSON;
	
КонецФункции

Функция СообщениеТестПримитивныхПараметров(Значение)
	
	ЗначениеJSON = XMLСтрока(Значение);
	Если ТипЗнч(Значение) = Тип("Строка") 
		ИЛИ ТипЗнч(Значение) = Тип("Дата")
		Тогда
		ЗначениеJSON = """" + ЗначениеJSON + """"	
	КонецЕсли;
	
	JSON = 
	"{
	|""ver"": ""0.2"",
	|""Error"": false,
	|""ErrorDescription"": """",
	|""data"": [{""Значение"": " + ЗначениеJSON + "}]
	|}";
	
	Возврат JSON;
	
КонецФункции

Функция СообщениеПеречисление()
	
	JSON = 
	"{
	|""ver"": ""0.2"",
	|""Error"": false,
	|""ErrorDescription"": """",
	|""data"": [{""Значение"": ""ЮридическоеЛицо""}]
	|}";
	
	Возврат JSON;
	
КонецФункции

#КонецОбласти

#Область Проверки

Процедура ПроверитьОтказ(Результат, Эталон)

	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("Отказ", "Есть свойство 'Отказ'")
			.Равно(Эталон, "Проверка флага 'Отказ'");	
	
КонецПроцедуры
	
Процедура ПроверитьКоличествоСтрокРезультата(Результат, Количество)

	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа 'Результат'")
		.Свойство("Данные", "Есть свойство 'Данные'")
			.ИмеетТип("Массив", "Проверка типа 'Данные'")
			.ИмеетДлину(Количество, "Проверка количества элементов массива 'Данные'");
	
КонецПроцедуры

Процедура ПроверитьЗначениеЕдинственнойСтроки(Результат, Эталон)

	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	ПроверитьЗначениеСтроки(Результат.Данные.Получить(0), Эталон);	
	
КонецПроцедуры

Процедура ПроверитьЗначениеСтроки(Строка, Эталон)

	ЮТест.ОжидаетЧто(Строка, "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("Значение", "Проверка значения первого элемента")
			.Равно(Эталон, "Проверка полученного значения");
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

Функция ПараметрыПодключения()

	Возврат вз_ВнешниеЗапросыИсходящие.ПолучитьПараметрыПодключения("Test");   	
	
КонецФункции

Функция ПолучитьТестовоеПеречисление()
	
	Возврат Перечисления._Демо_ЮрФизЛицо.ЮридическоеЛицо;
	
КонецФункции

Функция ПолучитьТестовыйСправочник()
	
	Возврат Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
КонецФункции

Функция ПолучитьТестовыйДокумент()
	
	Выборка = Документы._Демо_Заказ.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		ВызватьИсключение "Не удалось найти ниодин документ";
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьТекстЗапросаЗначения()

	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Запрос.Операторы.Получить(0);
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Значение", "Значение");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных)

	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Запрос.Операторы.Получить(0);
	
	СхемыЗапросов.ДобавитьИсточник(Оператор, ИдентификаторМетаданных.ПолноеИмя, "Объект");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Объект.Ссылка)", "УИД");
	СхемыЗапросов.ДобавитьУсловиеВОператор(Оператор, "Объект.Ссылка = &Ссылка");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

#КонецОбласти

