
// Дополнительные методы к типовым в модуле СхемыЗапросов

#Область ПрограммныйИнтерфейс

#Область Запросы

// Возвращает запрос таблицы результата схемы запроса, например в схеме запроса
//
// Параметры:
//  Пакет			 	- ПакетЗапросов - Пакет запросов схемы запросов
//  ИндексИмяТаблицы 	- Число 		- Индекс запроса по порядку, начиная с 0.
//						- Строка 		- Имя временной таблицы запроса.
//	Например, для таблиц запроса:
//  	*ВТНоменклатураВыборка - ИндексИмяТаблицы = "ВТНоменклатураВыборка"
//  	*ВТНоменклатура - ИндексИмяТаблицы = "ВТНоменклатура"
//  	*ЗапросПакета3 - ИндексИмяТаблицы = 0
//  	*ЗапросПакета4 - ИндексИмяТаблицы = 1
// 
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса - Найденный запрос
//
Функция ПолучитьЗапрос(Пакет, ИндексИмяТаблицы=Неопределено) Экспорт

	Если ИндексИмяТаблицы=Неопределено Тогда
		Запрос = ПолучитьРезультирующийЗапрос(Пакет);	
		
	ИначеЕсли ТипЗнч(ИндексИмяТаблицы) = Тип("Число") Тогда
		Запрос = ПолучитьРезультирующийЗапрос(Пакет, ИндексИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ИндексИмяТаблицы) = Тип("Строка") Тогда	
		Запрос = ПолучитьЗапросВременнойТаблицыПакета(Пакет, ИндексИмяТаблицы);
		
	Иначе
		ВызватьИсключение СтрШаблон("Не корректный параметр ""ИндексИмяТаблицы""", ИндексИмяТаблицы);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос временной таблицы из пакета запросов по имени
//
// Параметры:
//  Пакет				 - ПакетЗапросов - Пакет запросов схемы запросов
//  ИмяВременнойТаблицы	 - Строка		 - Имя временной таблицы
//  		*ВТНоменклатураВыборка - ИмяВременнойТаблицы = "ВТНоменклатураВыборка"
//  		*ВТНоменклатура - ИмяВременнойТаблицы = "ВТНоменклатура"
//  		*ЗапросПакета3 - Недоступно, используйте метод ПолучитьРезультирующийЗапрос()
//  		*ЗапросПакета4 - Недоступно, используйте метод ПолучитьРезультирующийЗапрос()
// 
// Возвращаемое значение:
//   - ЗапросВыбораСхемыЗапроса - Найденный запрос
//
Функция ПолучитьЗапросВременнойТаблицыПакета(Пакет, ИмяВременнойТаблицы) Экспорт
	
	Для каждого Запрос Из Пакет Цикл
		Если Запрос.ТаблицаДляПомещения = ИмяВременнойТаблицы Тогда
			Возврат Запрос;	
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон("Не удалось найти временную таблицу '%1' в схеме запроса", ИмяВременнойТаблицы);
		
КонецФункции

// Возвращает запрос таблицы результата схемы запроса, например в схеме запроса
//
// Параметры:
//  Пакет			- ПакетЗапросов - пакет запросов схемы запросов
//  ИндексТаблицы 	- Число		 	- Индекс запроса по порядку, начиная с 0
//  		*ВТНоменклатураВыборка - Недоступно, используйте метод ПолучитьЗапросВременнойТаблицыПакета()
//  		*ВТНоменклатура - Недоступно, используйте метод ПолучитьЗапросВременнойТаблицыПакета()
//  		*ЗапросПакета3 - ИндексРезультата = 0
//  		*ЗапросПакета4 - ИндексРезультата = 1
// 
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса - Найденный запрос
//
Функция ПолучитьРезультирующийЗапрос(Пакет, ИндексТаблицы= 0) Экспорт
	
	ИндексЗапроса = 0;
	
	Для каждого Запрос Из Пакет Цикл
		Если Запрос.ТаблицаДляПомещения = "" Тогда
			Если ИндексЗапроса = ИндексТаблицы Тогда
				Возврат Запрос;
			Иначе
				ИндексЗапроса = ИндексЗапроса + 1;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон("Не удалось получить результирующий запрос в схеме запросов с индексом %1", ИндексТаблицы);
	
КонецФункции

// Возвращает колонку запроса схемы запроса
//
// Параметры:
//  Запрос			 - ЗапросВыбора	 - Запрос выбора схемы запроса
//  ПсевдонимКолонки - Строка		 - Имя колонки запроса
// 
// Возвращаемое значение:
//  ВыражениеСхемыЗапроса, ВложеннаяТаблицаСхемыЗапроса - Колонка запроса
//
Функция ПолучитьКолонкуЗапроса(Запрос, ПсевдонимКолонки) Экспорт
	
	Колонка = Запрос.Колонки.Найти(ПсевдонимКолонки); 
	Если Колонка = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти колонку '%1' в схеме запроса", ПсевдонимКолонки);
	КонецЕсли;
	
	Возврат Колонка;
	
КонецФункции

#КонецОбласти

#Область ОператорыВыбора

// Возвращает оператор запроса удовлетворяющих условиям поиска. Неопределено - если ни один оператор не удовлетворяет условиям.
//
// Параметры:
//  ЗапросВыбора	 - ЗапросВыбораСхемыЗапроса - Запрос схемы в котором производится поиск операторов
//  ИмяТаблицы		 - Строка - Имя источника искомой таблицы
//  Псевдоним		 - Строка - Псевдоним источника искомой таблицы
// 
// Возвращаемое значение:
//   - ОператорВыбратьСхемыЗапроса, Неопределено
//
Функция ОператорВыбораСхемыЗапросаПоИсточнику(Знач ЗапросВыбора, ИмяТаблицы, Псевдоним = Неопределено) Экспорт
	
	Возврат ОператорыВыбораСхемыЗапросаПоИсточнику(ЗапросВыбора, ИмяТаблицы, Псевдоним, Истина);
	
КонецФункции

// Возвращает массив операторов запроса удовлетворяющих условиям поиска. Неопределено - если ни один оператор не удовлетворяет условиям.
//
// Параметры:
//  ЗапросВыбора	 - ЗапросВыбораСхемыЗапроса - Запрос схемы в котором производится поиск операторов
//  ИмяТаблицы		 - Строка - Имя источника искомой таблицы
//  Псевдоним		 - Строка - Псевдоним источника искомой таблицы
//  ВернутьПервый	 - Булево - Если ИСТИНА возвращает первый удовлетворяющий условиям поиска оператор.
// 
// Возвращаемое значение:
//   - Массив, ОператорВыбратьСхемыЗапроса, Неопределено
//
Функция ОператорыВыбораСхемыЗапросаПоИсточнику(Знач ЗапросВыбора, ИмяТаблицы, Псевдоним = Неопределено, ВернутьПервый = Ложь) Экспорт 
	
	Если ТипЗнч(ЗапросВыбора) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить источник в запросе уничтожения таблицы.';
								|en = 'Cannot determine the source in the table removal query.'"); 
	КонецЕсли;
	
	Если Не ТипЗнч(ЗапросВыбора) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 1';
								|en = 'Incorrect type of parameter 1'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(ИмяТаблицы) = Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 2';
								|en = 'Incorrect type of parameter 2'") ;
	КонецЕсли;
	
	Если Не Псевдоним = Неопределено
		И Не ТипЗнч(Псевдоним) = Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 3';
								|en = 'Incorrect type of parameter 3'") ;
	КонецЕсли;
	
	МассивОператоров = Новый Массив;
	Для Каждого ОператорЗапроса Из ЗапросВыбора.Операторы Цикл 
		Для Каждого ИсточникОператора Из ОператорЗапроса.Источники Цикл
			
			Если ИсточникОператора.Источник.ИмяТаблицы = ИмяТаблицы
				И (Псевдоним = Неопределено Или ИсточникОператора.Источник.Псевдоним = Псевдоним) Тогда
				Если ВернутьПервый Тогда
					Возврат ОператорЗапроса;
				КонецЕсли;
				МассивОператоров.Добавить(ОператорЗапроса);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если МассивОператоров.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивОператоров;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Источники

// Добавляет источник схемы запроса.
//  По-умолчанию при создании источника платформа дополнительно может создать еще связь с основным источником, она может быть некорректной.
//  Метод удаляет связь по умолчанию и добавляет указанное УсловиеСоединения, если оно установлено
//
// Параметры:
//  Оператор			 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса
//  ИмяТаблицы			 - Строка						 - Имя таблицы источника, например "Справочник.Контрагенты"
//  Псевдоним			 - Строка						 - Псевдоним созданного источника
//  УсловиеСоединения	 - Строка, Массив				 - Условие связи добавляемого источника с основным
//  				* Строка - Одно условие
//  				* Массив - Массив строк условий
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Добавленный источник
//
Функция ДобавитьИсточник(Оператор, ИмяТаблицы, Псевдоним, УсловиеСоединения="") Экспорт
	
	Источник = Оператор.Источники.Добавить(ИмяТаблицы, Псевдоним);	
	
	// Удаляем связь по-умолчанию, если её создала платформа
	ОсновнойИсточник = Оператор.Источники.Получить(0);
	Соединение = ОсновнойИсточник.Соединения.НайтиПоПсевдониму(Псевдоним);
	Если Соединение <> Неопределено Тогда
		Индекс = ОсновнойИсточник.Соединения.Индекс(Соединение);
		ОсновнойИсточник.Соединения.Удалить(Индекс);	
	КонецЕсли;
	
	Если ТипЗнч(УсловиеСоединения) = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(УсловиеСоединения) Тогда
			ОсновнойИсточник.Соединения.Добавить(Псевдоним, УсловиеСоединения);	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(УсловиеСоединения) = Тип("Массив") Тогда	
		Для каждого Условие Из УсловиеСоединения Цикл
			ОсновнойИсточник.Соединения.Добавить(Псевдоним, Условие);	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Источник;
		
КонецФункции

// Добавляет источник схемы запроса.
//  По-умолчанию при создании источника платформа дополнительно может создать еще связь с основным источником, она может быть некорректной.
//  Метод удаляет связь по умолчанию и добавляет указанное УсловиеСоединения, если оно установлено
//
// Параметры:
//  Оператор				 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса
//  ТекстВложенногоЗапроса	 - Строка						 - ТекстВложенного запроса
//  Псевдоним				 - Строка						 - Псевдоним созданного источника
//  УсловиеСоединения		 - Строка, Массив				 - Условие связи добавляемого источника с основным
//  				* Строка - Одно условие
//  				* Массив - Массив строк условий
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Добавленный источник
//
Функция ДобавитьИсточникВложенныйЗапрос(Оператор, ТекстВложенногоЗапроса, Псевдоним, УсловиеСоединения="") Экспорт
	
	Источник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), Псевдоним);	
	Источник.Источник.Запрос.УстановитьТекстЗапроса(ТекстВложенногоЗапроса);
	
	// Удаляем связь по-умолчанию, если её создала платформа
	ОсновнойИсточник = Оператор.Источники.Получить(0);
	Соединение = ОсновнойИсточник.Соединения.НайтиПоПсевдониму(Псевдоним);
	Если Соединение <> Неопределено Тогда
		Индекс = ОсновнойИсточник.Соединения.Индекс(Соединение);
		ОсновнойИсточник.Соединения.Удалить(Индекс);	
	КонецЕсли;
	
	Если ТипЗнч(УсловиеСоединения) = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(УсловиеСоединения) Тогда
			ОсновнойИсточник.Соединения.Добавить(Псевдоним, УсловиеСоединения);	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(УсловиеСоединения) = Тип("Массив") Тогда	
		Для каждого Условие Из УсловиеСоединения Цикл
			ОсновнойИсточник.Соединения.Добавить(Псевдоним, Условие);	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Источник;
		
КонецФункции

// Добавляет простое соединение источников схемы запроса
//
// Параметры:
//  Оператор			 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса
//  ИмяЛевойТаблицы		 - Строка						 - Имя или псевдоним левой таблицы соединения, например "Документ.СверкаВзаиморасчетов" или "ДокументСверкаВзаиморасчетов"
//  ИмяЛевогоРеквизита	 - Строка						 - Имя реквизита левой таблицы, например "Контрагент"
//  ИмяПравойТаблицы	 - Строка						 - Имя или псевдоним правой таблицы соединения, например "Справочник.Контрагенты" или "СправочникКонтрагенты"
//  ИмяПравогоРеквизита	 - Строка						 - Имя реквизита левой таблицы, например "Ссылка"
//
Процедура ДобавитьПростоеСоединениеИсточников(Оператор, ИмяЛевойТаблицы, ИмяЛевогоРеквизита, ИмяПравойТаблицы, ИмяПравогоРеквизита) Экспорт

	ЛевыйИсточник = Оператор.Источники.НайтиПоИмени(ИмяЛевойТаблицы);
	Если ЛевыйИсточник = Неопределено Тогда
		ЛевыйИсточник = Оператор.Источники.НайтиПоПсевдониму(ИмяЛевойТаблицы);	
	КонецЕсли;	
	Если ЛевыйИсточник = Неопределено Тогда
		ВызватьИсключение "Не удалось найти источник таблицы запроса по имени или псевдониму: " + ИмяЛевойТаблицы;	
	КонецЕсли;
	
	ПравыйИсточник = Оператор.Источники.НайтиПоИмени(ИмяПравойТаблицы);
	Если ПравыйИсточник = Неопределено Тогда
		ПравыйИсточник = Оператор.Источники.НайтиПоПсевдониму(ИмяПравойТаблицы);	
	КонецЕсли;	
	Если ПравыйИсточник = Неопределено Тогда
		ВызватьИсключение "Не удалось найти источник таблицы запроса по имени или псевдониму: " + ИмяПравойТаблицы;	
	КонецЕсли;
	
	Условие = СтрШаблон("%1.%2 = %3.%4",
		ЛевыйИсточник.Источник.Псевдоним,
		ИмяЛевогоРеквизита,
		ПравыйИсточник.Источник.Псевдоним,
		ИмяПравогоРеквизита
	);
	
	Допустимость = ЛевыйИсточник.Соединения.Добавить(ПравыйИсточник, Условие);
	
	Если НЕ Допустимость Тогда
		ВызватьИсключение "Условие соединения таблиц запроса не допустимо: " + Условие;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

// Процедура - Добавить условие в оператор
//
// Параметры:
//  Оператор		 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса
//  ВыражениеУсловия - Строка						 - Выражение условия для секции параметров виртуальной таблицы.
//
Процедура ДобавитьУсловиеВОператор(Оператор, ВыражениеУсловия) Экспорт
    
	Выражение = Новый ВыражениеСхемыЗапроса(ВыражениеУсловия);
	
	Оператор.Отбор.Добавить(Выражение);		
	
КонецПроцедуры

// Добавляет выражение условия в секцию ГДЕ
//
// Параметры:
//  Запрос				 - Строка, Запрос	 - Текст запроса или запрос.
//  ВыражениеУсловия	 - Строка			 - Выражение условия для секции параметров виртуальной таблицы.
//  ИндексИмяТаблицы 	- Число 		- Индекс запроса по порядку, начиная с 0.
//						- Строка 		- Имя временной таблицы запроса.
//	Например, для таблиц запроса:
//  	*ВТНоменклатураВыборка - ИндексИмяТаблицы = "ВТНоменклатураВыборка"
//  	*ВТНоменклатура - ИндексИмяТаблицы = "ВТНоменклатура"
//  	*ЗапросПакета3 - ИндексИмяТаблицы = 0
//  	*ЗапросПакета4 - ИндексИмяТаблицы = 1
//  ИндексОператора		 - Число			 - Индекс оператора в запросе. По умолчанию - добавляет в первый оператор. Если установить -1, добавляет во все операторы
//
Процедура ДобавитьУсловиеВЗапрос(Запрос, ВыражениеУсловия, ИндексИмяТаблицы = Неопределено, ИндексОператора = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра ""Запрос""';
								|en = 'Incorrect type of parameter ""Query""'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(ВыражениеУсловия) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра ""ВыражениеУсловия""';
								|en = 'Incorrect type of parameter ""FilterExpression""'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса();	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);	
	ЗапросПакета = ПолучитьЗапрос(СхемаЗапроса.ПакетЗапросов, ИндексИмяТаблицы);
	
	Если ИндексОператора = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы.Получить(0);
		ДобавитьУсловиеВОператор(Оператор, ВыражениеУсловия);

	ИначеЕсли ИндексОператора = -1 Тогда
		Для каждого Оператор Из ЗапросПакета.Операторы Цикл
			ДобавитьУсловиеВОператор(Оператор, ВыражениеУсловия);
		КонецЦикла;
		
	Иначе
		Оператор = ЗапросПакета.Операторы.Получить(ИндексОператора);
		ДобавитьУсловиеВОператор(Оператор, ВыражениеУсловия);

	КонецЕсли;
		
	// Подготовим результат
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	УдалитьМусорИзТекстаЗапроса(ТекстЗапроса);
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет выражение условия из секции ГДЕ
//
// Параметры:
//  Запрос				 - Строка, Запрос	 - текст запроса или запрос.
//  ВыражениеУсловия	 - Строка			 - выражение условия для секции параметров виртуальной таблицы.
//  ИндексИмяТаблицы 	- Число 		- Индекс запроса по порядку, начиная с 0.
//						- Строка 		- Имя временной таблицы запроса.
//	Например, для таблиц запроса:
//  	*ВТНоменклатураВыборка - ИндексИмяТаблицы = "ВТНоменклатураВыборка"
//  	*ВТНоменклатура - ИндексИмяТаблицы = "ВТНоменклатура"
//  	*ЗапросПакета3 - ИндексИмяТаблицы = 0
//  	*ЗапросПакета4 - ИндексИмяТаблицы = 1
//  ИндексОператора		 - Число			 - Индекс оператора в запросе. По умолчанию - добавляет в первый оператор. Если установить -1, добавляет во все операторы
// 
Процедура УдалитьУсловиеВЗапросе(Запрос, ВыражениеУсловия, ИндексИмяТаблицы = Неопределено, ИндексОператора = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 1';
								|en = 'Incorrect type of parameter 1'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(ВыражениеУсловия) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 2';
								|en = 'Incorrect type of parameter 2'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ЗапросПакета = ПолучитьЗапрос(СхемаЗапроса.ПакетЗапросов, ИндексИмяТаблицы);	
	
	Выражение = Новый ВыражениеСхемыЗапроса(ВыражениеУсловия);	
	
	Если ИндексОператора = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы.Получить(0);
		УдалитьВыражениеИзКоллекции(Оператор.Отбор, Выражение);
		
	ИначеЕсли ИндексОператора = -1 Тогда
		Для каждого Оператор Из ЗапросПакета.Операторы Цикл
			УдалитьВыражениеИзКоллекции(Оператор.Отбор, Выражение);	
		КонецЦикла;
		
	Иначе
		Оператор = ЗапросПакета.Операторы.Получить(ИндексОператора);
		УдалитьВыражениеИзКоллекции(Оператор.Отбор, Выражение);
	КонецЕсли;
	
	// Подготовим результат
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	УдалитьМусорИзТекстаЗапроса(ТекстЗапроса);
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыбираемыеПоля

// Добавляет новое выбираемое поле в оператор выбора, если колонка запроса не будет найдена, добавляет новую в конец списка
//
// Параметры:
//  Запрос			 - ЗапросВыбораСхемыЗапроса	 - Запрос выбора схемы запроса
//  Оператор		 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса
//  Выражение		 - Строка						 - Строка, на основе которой будет создано выражение
//  ПсевдонимКолонки - Строка						 - имя колонки запроса, если колонка запроса не будет найдена, добавляет новую в конец списка
// 
// Возвращаемое значение:
//  КолонкаСхемыЗапроса - колонка в которую помещено выражение
//
Функция ДобавитьВыбираемоеПоле(Запрос, Оператор, Выражение, ПсевдонимКолонки) Экспорт
	
	Колонка = Запрос.Колонки.Найти(ПсевдонимКолонки);		
	Если Колонка = Неопределено Тогда
		
		Выражение = Оператор.ВыбираемыеПоля.Добавить(Выражение);
		
		// Будет добавлена новая колонка в конец, установим её псевдоним
		Колонка = Запрос.Колонки.Получить(Запрос.Колонки.Количество() - 1);
		Колонка.Псевдоним = ПсевдонимКолонки;
		
	Иначе
		Выражение = Оператор.ВыбираемыеПоля.Добавить(Выражение, Запрос.Колонки.Индекс(Колонка));
	КонецЕсли;
	
	Возврат Колонка;
	
КонецФункции

// Возвращает выбираемое поле оператора запроса
//
// Параметры:
//  Запрос			 - ЗапросВыбораСхемыЗапроса	 - Запрос выбора схемы запроса
//  Оператор		 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса. По умолчанию первый оператор.
//  ПсевдонимКолонки - Строка						 - Имя колонки запроса
// 
// Возвращаемое значение:
//  Строка  - Выбираемое поле оператора запроса
//
Функция ПолучитьВыражениеПоля(Запрос, Оператор = Неопределено, ПсевдонимКолонки) Экспорт
	
	// Определим индекс колонки
	Колонка = ПолучитьКолонкуЗапроса(Запрос, ПсевдонимКолонки);
	ИндексКолонки = Запрос.Колонки.Индекс(Колонка);
	
	Если Оператор = Неопределено Тогда
		Оператор = Запрос.Операторы.Получить(0);		
	КонецЕсли;
	
	// Найдем поле
	Поле = Оператор.ВыбираемыеПоля.Получить(ИндексКолонки);
	Если Поле = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти поле оператора '%1' в схеме запроса по псевдониму колонки", ПсевдонимКолонки);	
	КонецЕсли;
	
	Выражение = Оператор.ВыбираемыеПоля.Получить(ИндексКолонки);
	Если ТипЗнч(Выражение) <> Тип("ВыражениеСхемыЗапроса") Тогда
		ВызватьИсключение СтрШаблон("Не корректный тип выбираемого поля %1 запроса", ПсевдонимКолонки);	
	КонецЕсли;
	
	Возврат Строка(Выражение);
	
КонецФункции

// Устанавливает выражение выбираемого поля оператора запроса
//
// Параметры:
//  Запрос			 - ЗапросВыбораСхемыЗапроса	 - Запрос выбора схемы запроса
//  Оператор		 - ОператорВыбратьСхемыЗапроса	 - Оператор выбора схемы запроса. По умолчанию первый оператор.
//  ПсевдонимКолонки - Строка						 - Имя колонки запроса
//  Выражение		 - Строка						 - Текст выражения поля
//
Процедура УстановитьВыражениеПоля(Запрос, Оператор = Неопределено, ПсевдонимКолонки, Выражение) Экспорт
	
	// Определим индекс колонки
	Колонка = ПолучитьКолонкуЗапроса(Запрос, ПсевдонимКолонки);
	ИндексКолонки = Запрос.Колонки.Индекс(Колонка);
	
	// Найдем поле
	Если Оператор = Неопределено Тогда
		Оператор = Запрос.Операторы.Получить(0);		
	КонецЕсли;
	
	Поле = Оператор.ВыбираемыеПоля.Получить(ИндексКолонки);
	Если Поле = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти поле оператора '%1' в схеме запроса по псевдониму колонки", ПсевдонимКолонки);	
	КонецЕсли;
	
	Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Новый ВыражениеСхемыЗапроса(Выражение));
	
КонецПроцедуры

// Добавляет выражение условия в секцию ГДЕ
//
// Параметры:
//  Запрос			 - Строка, Запрос	 - Текст запроса или запрос.
//  ПсевдонимКолонки - Строка			 - Имя колонки запроса
//  ВыражениеУсловия - Строка			 - Выражение условия для секции параметров виртуальной таблицы.
//  ИндексИмяТаблицы 	- Число 		- Индекс запроса по порядку, начиная с 0.
//						- Строка 		- Имя временной таблицы запроса.
//	Например, для таблиц запроса:
//  	*ВТНоменклатураВыборка - ИндексИмяТаблицы = "ВТНоменклатураВыборка"
//  	*ВТНоменклатура - ИндексИмяТаблицы = "ВТНоменклатура"
//  	*ЗапросПакета3 - ИндексИмяТаблицы = 0
//  	*ЗапросПакета4 - ИндексИмяТаблицы = 1
//  ИндексОператора	 - Число			 - Индекс оператора в запросе. По умолчанию - добавляет в первый оператор. Если установить -1, добавляет во все операторы
//
Процедура УстановитьВыражениеПоляЗапроса(Запрос, ПсевдонимКолонки, ВыражениеУсловия, ИндексИмяТаблицы = Неопределено, ИндексОператора = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра ""Запрос""';
								|en = 'Incorrect type of parameter ""Query""'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(ВыражениеУсловия) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра ""ВыражениеУсловия""';
								|en = 'Incorrect type of parameter ""FilterExpression""'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса();	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);	
	ЗапросПакета = ПолучитьЗапрос(СхемаЗапроса.ПакетЗапросов, ИндексИмяТаблицы);
	
	Если ИндексОператора = Неопределено Тогда
		Оператор = ЗапросПакета.Операторы.Получить(0);
		УстановитьВыражениеПоля(ЗапросПакета, Оператор, ПсевдонимКолонки, ВыражениеУсловия);

	ИначеЕсли ИндексОператора = -1 Тогда
		Для каждого Оператор Из ЗапросПакета.Операторы Цикл
			УстановитьВыражениеПоля(ЗапросПакета, Оператор, ПсевдонимКолонки, ВыражениеУсловия);
		КонецЦикла;
		
	Иначе
		Оператор = ЗапросПакета.Операторы.Получить(ИндексОператора);
		УстановитьВыражениеПоля(ЗапросПакета, Оператор, ПсевдонимКолонки, ВыражениеУсловия);

	КонецЕсли;
		
	// Подготовим результат
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	УдалитьМусорИзТекстаЗапроса(ТекстЗапроса);
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Удаляет мусор из текста запроса:
//  * Лишние псевдонимы, например "КАК Поле1"
//
// Параметры:
//  ТекстЗапроса - Строка	 - ТекстЗапроса
//
Процедура УдалитьМусорИзТекстаЗапроса(ТекстЗапроса) Экспорт

	Для НомерПоля = 1 По 9 Цикл 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК Поле" + НомерПоля, "");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Служебные

Процедура УдалитьВыражениеИзКоллекции(Коллекция, Выражение)

	Индекс = 0;
	Пока Индекс < Коллекция.Количество() Цикл		
		Элемент = Коллекция.Получить(Индекс);		
		Если Элемент = Выражение Тогда
			Коллекция.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
