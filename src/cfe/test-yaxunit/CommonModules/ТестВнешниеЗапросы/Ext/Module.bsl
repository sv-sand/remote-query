
#Область СлужебныйПрограммныйИнтерфейс

#Область Тесты

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты	
		.ДобавитьТестовыйНабор("ВЗ.ПолныйЦикл / Негативные тесты")
			.ДобавитьТест("Пинг", "Пинг")
			.ДобавитьТест("ЗапретПроизвольныхЗапросов", "Ошибка запрещены произвольные")
			.ДобавитьТест("ЗапретЗапросовИзСправочника", "Ошибка запрещены из справочника")
			.ДобавитьТест("ОшибкаПустойЗапрос", "Ошибка пустой запрос")
		
			.ДобавитьТест("ОшибкаНеверныйТипОбъекта", "Ошибка НеверныйТипОбъекта (Справочник)")		
			.ДобавитьТест("ОшибкаПоиска", "Ошибка поиска (Справочник)")
			.ДобавитьТест("ОшибкаЗначениеНеопределено", "Ошибка ЗначениеНеопределено (Справочник)")
			.ДобавитьТест("ИгнорОшибкиПоиска", "Игнор ошибки поиска (Справочник)")
			
			.ДобавитьТест("ИзСправочникаПустойЗапрос", "Из справочника: запрос. Ошибка пустой запрос")
			.ДобавитьТест("ИзСправочникаПустойКод", "Из справочника: код. Ошибка пустой код")
			.ДобавитьТест("ИзСправочникаНеУстановленПараметр", "Из справочника. Ошибка не установлен параметр")
			.ДобавитьТест("ИзСправочникаУжеУстановленПараметр", "Из справочника. Ошибка уже установлен параметр")
			.ДобавитьТест("ИзСправочникаПараметрНеИспользуется", "Из справочника. Ошибка параметр не используется")
			
		.ДобавитьТестовыйНабор("ВЗ.ПолныйЦикл / Примитивные параметры")
			.ДобавитьТест("ТестПримитивныхПараметров", "Булево").СПараметрами(Истина)	
			.ДобавитьТест("ТестПримитивныхПараметров", "Строка").СПараметрами("Тестовая строка")	
			.ДобавитьТест("ТестПримитивныхПараметров", "Число").СПараметрами(3.14)	
			.ДобавитьТест("ТестПримитивныхПараметров", "Дата").СПараметрами(ТекущаяДата())
			
		.ДобавитьТестовыйНабор("ВЗ.ПолныйЦикл / Ссылочные параметры")
			.ДобавитьТест("ТестПеречисление", "Перечисление: успешный поиск")

			.ДобавитьТест("ТестСправочникПоискПоУмолчанию", "Справочник: поиск по умолчанию")
			.ДобавитьТест("ТестСправочникПоискСсылка", "Справочник: поиск Ссылка")
			.ДобавитьТест("ТестСправочникПоискКод", "Справочник: поиск Код")
			.ДобавитьТест("ТестСправочникПоискНаименование", "Справочник: поиск Наименование")
			.ДобавитьТест("ТестСправочникПоискПредопределенноеИмя", "Справочник: поиск ПредопределенноеИмя")
			.ДобавитьТест("ТестСправочникПоискСсылкаКодНаименование", "Справочник: поиск Ссылка-Код-Наименование")
			.ДобавитьТест("ТестСправочникОшибкаПоискаСсылкаКодНаименование", "Справочник: ошибка поиска Ссылка-Код-Наименование")
		
			.ДобавитьТест("ТестДокументПоискПоУмолчанию", "Документ: поиск по умолчанию")
			.ДобавитьТест("ТестДокументПоискСсылка", "Документ: поиск Ссылка")
			.ДобавитьТест("ТестДокументПоискНомерДата", "Документ: поиск Номер-Дата")
			
		.ДобавитьТестовыйНабор("ВЗ.ПолныйЦикл / Запрос из справочника")
			.ДобавитьТест("ТестСправочникЗапрос", "Из справочника: запрос")	
			.ДобавитьТест("ТестСправочникКод", "Из справочника: код")	
			
		.ДобавитьТестовыйНабор("ВЗ.ПолныйЦикл / Прочие")
			.ДобавитьТест("ТестПроизвольныйПараметр", "Произвольный параметр")
			.ДобавитьТест("ТестРезультатЗапросаВТаблицуЗначений", "Результат запроса в таблицу значений")
			.ДобавитьТест("ТестПолучитьКешСсылок", "Получить кеш ссылок");
	
КонецПроцедуры

#Область События

Процедура Инициализация() Экспорт	
КонецПроцедуры

#Область СобытияЗагрузкиТестов

Процедура ПередЧтениеСценариев() Экспорт
КонецПроцедуры

Процедура ПередЧтениемСценариевМодуля() Экспорт
КонецПроцедуры

Процедура ПослеЧтенияСценариевМодуля() Экспорт
КонецПроцедуры

Процедура ПослеЧтенияСценариев() Экспорт
КонецПроцедуры

Процедура ПослеФормированияИсполняемыхНаборовТестов() Экспорт
КонецПроцедуры

#КонецОбласти

#Область СобытияИсполненияТестов

Процедура ПередВсемиТестами() Экспорт
	
	УдалитьТестовыеОбъекты();
	СоздатьТестовыеОбъекты();	
	
КонецПроцедуры

Процедура ПослеВсехТестов() Экспорт
	
	
	
КонецПроцедуры

Процедура ПередТестовымНабором() Экспорт
КонецПроцедуры

Процедура ПослеТестовогоНабора() Экспорт
КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт
КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт
КонецПроцедуры

Процедура ПередВыполнениемТестов() Экспорт
КонецПроцедуры

Процедура ПослеВыполненияТестов() Экспорт
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НегативныеТесты

Процедура Пинг() Экспорт

	ОжидаемыйРезультат = 
		"Successful connection!
		|Subsystem version 1.0.0.1
		|Protocol version 0.3";
	
	Параметры = ПараметрыПодключения();
	Результат = вз_ВнешниеЗапросыИсходящие.ПроверкаПодключения(Параметры);
	
	// Тесты
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(ОжидаемыйРезультат, "Проверка результата");

КонецПроцедуры

Процедура ЗапретПроизвольныхЗапросов() Экспорт
	
	Константы.вз_ИспользоватьПроизвольныеВнешниеЗапросы.Установить(Ложь);
	
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, "");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	Константы.вз_ИспользоватьПроизвольныеВнешниеЗапросы.Установить(Истина);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
		.Содержит("Запрещено использование произвольных внешних запросов", "Проверка текста ошибки");

КонецПроцедуры
	
Процедура ЗапретЗапросовИзСправочника() Экспорт
	
	Константы.вз_ИспользоватьВнешниеЗапросыИзСправочника.Установить(Ложь);
	
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	Константы.вз_ИспользоватьВнешниеЗапросыИзСправочника.Установить(Истина);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
		.Содержит("Запрещено использование внешних запросов из справочника", "Проверка текста ошибки");

КонецПроцедуры	
	
Процедура ОшибкаПустойЗапрос() Экспорт

	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, "");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
		.Содержит("Не заполнен текст запроса", "Проверка текста ошибки");

КонецПроцедуры
	
Процедура ОшибкаНеверныйТипОбъекта() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", "_Демо_Контрагенты_Неправильный", Эталон, , Ложь);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Неизвестный тип объекта метаданных", "Проверка текста ошибки");
		
КонецПроцедуры

Процедура ОшибкаЗначениеНеопределено() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, "");

	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Пакет);
	ПараметрыМетода.Добавить("Ссылка");
	ПараметрыМетода.Добавить(ИдентификаторМетаданных.Имя);
	ПараметрыМетода.Добавить(Неопределено);
	
	ЮТест.ОжидаетЧто(Неопределено)
		.Метод("вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник", ПараметрыМетода)
		.ВыбрасываетИсключение("Неверное значение при создании параметра", "Проверка вывода исключения");	
	
КонецПроцедуры

Процедура ОшибкаПоиска() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, ИдентификаторМетаданных.ЗначениеПустойСсылки);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не удалось найти объект", "Проверка текста ошибки");
		
КонецПроцедуры

Процедура ИгнорОшибкиПоиска() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, ИдентификаторМетаданных.ЗначениеПустойСсылки, , Ложь);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 0);
		
КонецПроцедуры

Процедура ИзСправочникаПустойЗапрос() Экспорт

	Эталон = Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_ПустойЗапрос");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не заполнен текст запроса", "Проверка текста ошибки");	
	
КонецПроцедуры
		
Процедура ИзСправочникаПустойКод() Экспорт

	Эталон = Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_ПустойКод");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не заполнен исполняемый код", "Проверка текста ошибки");	
	
КонецПроцедуры

Процедура ИзСправочникаНеУстановленПараметр() Экспорт

	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_Код");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не указан необходимый параметр 'ИНН'", "Проверка текста ошибки");	
	
КонецПроцедуры

Процедура ИзСправочникаУжеУстановленПараметр() Экспорт

	Эталон = Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_Запрос");
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", "_Демо_Контрагенты", Эталон);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "ИНН", "2222222222222");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Параметр 'ИНН' уже установлен в справочнике", "Проверка текста ошибки");	
	
КонецПроцедуры
		
Процедура ИзСправочникаПараметрНеИспользуется() Экспорт

	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_Код");
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "ИНН", "1111111111111");
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "КПП", "2222222222222");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Параметр 'КПП' не используется", "Проверка текста ошибки");	
	
КонецПроцедуры		

#КонецОбласти

Процедура ТестПримитивныхПараметров(Эталон) Экспорт
	
	ТекстЗапроса = ПолучитьТекстЗапросаЗначения();
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Значение", Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьЗначениеЕдинственнойСтроки(Результат, Эталон);
		
КонецПроцедуры

#Область Справочники

Процедура ТестСправочникПоискПоУмолчанию() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискСсылка() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискКод() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Код");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(ПараметрыПодключения(), Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискНаименование() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Наименование");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникПоискПредопределенноеИмя() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "ПредопределенноеИмя");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры
		
Процедура ТестСправочникПоискСсылкаКодНаименование() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка-Код-Наименование");
	
	Пакет.content.params[0].value.ref = "0" + Сред(Пакет.content.params[0].value.ref, 2);
	Пакет.content.params[0].value.code = "_" + Сред(Пакет.content.params[0].value.ref, 2);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестСправочникОшибкаПоискаСсылкаКодНаименование() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка-Код-Наименование");
	
	param = Пакет.content.params[0].value;
	param.ref = "0" + Сред(param.ref, 2);
	param.code = "_" + Сред(param.code, 2);
	param.name = "_" + Сред(param.name, 2);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Истина);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("ОписаниеОшибки", "Есть свойство 'ОписаниеОшибки'")
			.Содержит("Не удалось найти объект", "Проверка текста ошибки")
			.Содержит("по ссылке", "Проверка текста ошибки")
			.Содержит("коду", "Проверка текста ошибки")
			.Содержит("и наименованию", "Проверка текста ошибки");
		
КонецПроцедуры

#КонецОбласти

#Область Перечисления

Процедура ТестПеречисление() Экспорт

	Эталон = ПолучитьТестовоеПеречисление();
	ТекстЗапроса = ПолучитьТекстЗапросаЗначения();
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПеречисление(Пакет, "Значение", Эталон, Эталон.Метаданные().Имя);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("Значение", "Наличие свойства УИД")
			.Равно(XMLСтрока(Эталон), "Проверка значения");
		
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ТестДокументПоискПоУмолчанию() Экспорт

	Эталон = ПолучитьТестовыйДокумент();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрДокумент(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестДокументПоискСсылка() Экспорт

	Эталон = ПолучитьТестовыйДокумент();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрДокумент(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Ссылка");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестДокументПоискНомерДата() Экспорт

	Эталон = ПолучитьТестовыйДокумент();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрДокумент(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, Эталон, "Номер-Дата");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

#КонецОбласти

#Область ЗапросыИзСправочника

Процедура ТестСправочникЗапрос() Экспорт

	Эталон = Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_Запрос");
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", "_Демо_Контрагенты", Эталон);
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");	
	
КонецПроцедуры
		
Процедура ТестСправочникКод() Экспорт

	Эталон = Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетЗапросаИзСправочника(Параметры, "_Код");
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "ИНН", "1111111111111");
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет, Истина);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	
	ЮТест.ОжидаетЧто(Результат.Данные, "Проверка значения первого элемента")
		.ИмеетТип("ТаблицаЗначений");
		
	Строка = Результат.Данные.Получить(0);	
	
	ЮТест.ОжидаетЧто(Строка)
		.ИмеетСвойство("Значение")
		.Свойство("Значение").Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");	
	
КонецПроцедуры		

#КонецОбласти

#Область Прочее

Процедура ТестПроизвольныйПараметр() Экспорт

	Эталон = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Эталон));
	ТекстЗапроса = ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Код", Эталон.Код + "_");
	ПараметрыПоиска.Вставить("Наименование", Эталон.Наименование);
	
	ИсполняемыйКод = СтрШаблон(
		"Значение = Справочники.%1.НайтиПоКоду(Параметры.Код);
		|Если НЕ ЗначениеЗаполнено(Значение) Тогда
		|	Значение = Справочники.%1.НайтиПоНаименованию(Параметры.Наименование); 	
		|КонецЕсли;",
		ИдентификаторМетаданных.Имя
	);
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса); 
	
	Параметр = вз_ВнешниеЗапросыИсходящие.СоздатьПараметрСсылочногоТипа(
		ИдентификаторМетаданных.ПолноеИмя, "Произвольный", , , , , , , ИсполняемыйКод, ПараметрыПоиска
	);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметр(Пакет, "Ссылка", Параметр);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	
	ЮТест.ОжидаетЧто(Результат.Данные.Получить(0), "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(Эталон.УникальныйИдентификатор()), "Проверка значения");
		
КонецПроцедуры

Процедура ТестРезультатЗапросаВТаблицуЗначений() Экспорт

	ЭталонБулево = Истина;
	ЭталонСтрока = "Тестовая строка";
	ЭталонЧисло = 3.123456789;
	ЭталонДата = ТекущаяДата();
	
	ЭталонСсылка = ПолучитьТестовыйСправочник();
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЭталонСсылка));
	
	// Формируем текст запроса
	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Запрос.Операторы.Получить(0);
	
	СхемыЗапросов.ДобавитьИсточник(Оператор, ИдентификаторМетаданных.ПолноеИмя, "Объект");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Объект.Ссылка)", "УИД");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Булево", "Булево");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Строка", "Строка");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Число", "Число");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Дата", "Дата");
	
	СхемыЗапросов.ДобавитьУсловиеВОператор(Оператор, "Объект.Ссылка = &Ссылка");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Отправка запроса
	Параметры = ПараметрыПодключения();
	Пакет = вз_ВнешниеЗапросыИсходящие.СоздатьПакетПроизвольногоЗапроса(Параметры, ТекстЗапроса);
	
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрСправочник(Пакет, "Ссылка", ИдентификаторМетаданных.Имя, ЭталонСсылка);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Булево", ЭталонБулево);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Строка", ЭталонСтрока);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Число", ЭталонЧисло);
	вз_ВнешниеЗапросыИсходящие.ДобавитьПараметрПримитивногоТипа(Пакет, "Дата", ЭталонДата);
	
	Результат = вз_ВнешниеЗапросыИсходящие.ОтправитьЗапрос(Параметры, Пакет, Истина);
	
	// Тесты
	ПроверитьОтказ(Результат, Ложь);
	
	ЮТест.ОжидаетЧто(Результат.Данные)
		.ИмеетТип("ТаблицаЗначений", "Проверка типа 'Результат'")
			.ИмеетДлину(1, "Проверка количества элементов массива 'Данные'");
			
	Строка = Результат.Данные.Получить(0);
	
	ЮТест.ОжидаетЧто(Строка, "Проверка значения ссылки")
		.Свойство("УИД", "Наличие свойства УИД")
			.Равно(Строка(ЭталонСсылка.УникальныйИдентификатор()), "Проверка значения ссылки");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Булево")
		.Свойство("Булево", "Наличие свойства Булево")
			.Равно(ЭталонБулево, "Проверка значения Булево");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Строка")
		.Свойство("Строка", "Наличие свойства Строка")
			.Равно(ЭталонСтрока, "Проверка значения Строка");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Число")
		.Свойство("Число", "Наличие свойства Число")
			.Равно(ЭталонЧисло, "Проверка значения Число");
			
	ЮТест.ОжидаетЧто(Строка, "Проверка значения Дата")
		.Свойство("Дата", "Наличие свойства Дата")
			.Равно(ЭталонДата, "Проверка значения Дата");
		
КонецПроцедуры

Процедура ТестПолучитьКешСсылок() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	УникальныйИдентификатор(Объект.Ссылка) КАК УИД,
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник._Демо_Контрагенты КАК Объект";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Кеш = вз_ВнешниеЗапросы.ПолучитьКешСсылок("Справочник._Демо_Контрагенты", Таблица.ВыгрузитьКолонку("УИД"));
	
	Для каждого Строка Из Таблица Цикл
		ЮТест.ОжидаетЧто(Строка.Ссылка)
			.Равно(Кеш.Получить(Строка.УИД), "Проверка ссылки " + Строка.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Тестирование

Процедура ПроверитьОтказ(Результат, Эталон)

	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа объета 'Результат'")
		.Свойство("Отказ", "Есть свойство 'Отказ'")
			.Равно(Эталон, "Проверка флага 'Отказ'");	
	
КонецПроцедуры
	
Процедура ПроверитьКоличествоСтрокРезультата(Результат, Количество)

	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Структура", "Проверка типа 'Результат'")
		.Свойство("Данные", "Есть свойство 'Данные'")
			.ИмеетТип("Массив", "Проверка типа 'Данные'")
			.ИмеетДлину(Количество, "Проверка количества элементов массива 'Данные'");
	
КонецПроцедуры

Процедура ПроверитьЗначениеЕдинственнойСтроки(Результат, Эталон)

	ПроверитьКоличествоСтрокРезультата(Результат, 1);
	ПроверитьЗначениеСтроки(Результат.Данные.Получить(0), Эталон);	
	
КонецПроцедуры

Процедура ПроверитьЗначениеСтроки(Строка, Эталон)

	ЮТест.ОжидаетЧто(Строка, "Проверка значения первого элемента")
		.ИмеетТип("Структура")
		.Свойство("Значение", "Проверка значения первого элемента")
			.Равно(Эталон, "Проверка полученного значения");
	
КонецПроцедуры

#КонецОбласти

#Область ТестовыеДанные

#Область Создание

Процедура СоздатьТестовыеОбъекты()

	#Область Контрагенты
	
	Контрагент = Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент.ПолучитьОбъект();
	Контрагент.ИНН = "1111111111111";
	Контрагент.КПП = "222222222";
	Контрагент.Записать();
	
	#КонецОбласти
	
	#Область ВнешниеЗапросы
	
	Идентификатор = "_Запрос";
	Если НЕ ЗначениеЗаполнено(НайтиСсылку("Справочник.вз_ВнешниеЗапросы", Идентификатор, Ложь)) Тогда
		Объект = Справочники.вз_ВнешниеЗапросы.СоздатьЭлемент();
		Объект.Наименование = Идентификатор;
		Объект.Вид = Перечисления.вз_ВидыВнешнихЗапросов.Запрос;
		Объект.Комментарий = НовыйКомментарий(Идентификатор);
		
		Объект.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УИД,
			|	Т.ИНН КАК ИНН
			|ИЗ
			|	Справочник._Демо_Контрагенты КАК Т
			|ГДЕ
			|	Т.Ссылка = &Ссылка
			|	И Т.ИНН = &ИНН";
		
		Параметр = Объект.Параметры.Добавить();
		Параметр.Имя = "Ссылка";
		Параметр.Внешний = Истина;
		
		Параметр = Объект.Параметры.Добавить();
		Параметр.Имя = "ИНН";
		Параметр.Значение = "1111111111111";
		
		Объект.Записать();	
	КонецЕсли;
	
	Идентификатор = "_Код";
	Если НЕ ЗначениеЗаполнено(НайтиСсылку("Справочник.вз_ВнешниеЗапросы", Идентификатор, Ложь)) Тогда
		Объект = Справочники.вз_ВнешниеЗапросы.СоздатьЭлемент();
		Объект.Наименование = Идентификатор;
		Объект.Вид = Перечисления.вз_ВидыВнешнихЗапросов.Код;
		Объект.Комментарий = НовыйКомментарий(Идентификатор);
		
		Объект.ИсполняемыйКод = 
			"Ссылка = Справочники._Демо_Контрагенты.НайтиПоРеквизиту(""ИНН"", Параметры.ИНН);
			|
			|Результат = Новый ТаблицаЗначений;
			|Результат.Колонки.Добавить(""Значение"", Новый ОписаниеТипов(""Строка"", , , , Новый КвалификаторыСтроки(50)));
			|Строка = Результат.Добавить();
			|Строка.Значение = Строка(Ссылка.УникальныйИдентификатор());
			|";
		
		Параметр = Объект.Параметры.Добавить();
		Параметр.Имя = "ИНН";
		Параметр.Внешний = Истина;
		
		Объект.Записать();	
	КонецЕсли;
	
	Идентификатор = "_ПустойЗапрос";
	Если НЕ ЗначениеЗаполнено(НайтиСсылку("Справочник.вз_ВнешниеЗапросы", Идентификатор, Ложь)) Тогда
		Объект = Справочники.вз_ВнешниеЗапросы.СоздатьЭлемент();
		Объект.Наименование = Идентификатор;
		Объект.Вид = Перечисления.вз_ВидыВнешнихЗапросов.Запрос;
		Объект.Комментарий = НовыйКомментарий(Идентификатор);		
		Объект.Записать();	
	КонецЕсли;
	
	Идентификатор = "_ПустойКод";
	Если НЕ ЗначениеЗаполнено(НайтиСсылку("Справочник.вз_ВнешниеЗапросы", Идентификатор, Ложь)) Тогда
		Объект = Справочники.вз_ВнешниеЗапросы.СоздатьЭлемент();
		Объект.Наименование = Идентификатор;
		Объект.Вид = Перечисления.вз_ВидыВнешнихЗапросов.Код;
		Объект.Комментарий = НовыйКомментарий(Идентификатор);
		Объект.Записать();	
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура УдалитьТестовыеОбъекты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Типы = Новый Массив;
	Типы.Добавить("Справочник.вз_ВнешниеЗапросы");
	
	Шаблон = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	&ТипОбъекта КАК Т
	|ГДЕ
	|	Комментарий ПОДОБНО &Комментарий";
	
	ТекстыЗапроса = Новый Массив;
	Для каждого Тип Из Типы Цикл
		Текст = СтрЗаменить(Шаблон, "&ТипОбъекта", Тип); 
		ТекстыЗапроса.Добавить(Текст); 	
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	Запрос.УстановитьПараметр("Комментарий", НовыйКомментарий() + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.Удалить();
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#Область Получение

Функция ПараметрыПодключения()

	Возврат вз_ВнешниеЗапросыИсходящие.ПолучитьПараметрыПодключения("Test");   	
	
КонецФункции

Функция ПолучитьТестовоеПеречисление()
	
	Возврат Перечисления._Демо_ЮрФизЛицо.ЮридическоеЛицо;
	
КонецФункции

Функция ПолучитьТестовыйСправочник()
	
	Возврат Справочники._Демо_Контрагенты.ПредопределенныйКонтрагент;
	
КонецФункции

Функция ПолучитьТестовыйДокумент()
	
	Выборка = Документы._Демо_Заказ.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		ВызватьИсключение "Не удалось найти ниодин документ";
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьТекстЗапросаЗначения()

	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Запрос.Операторы.Получить(0);
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "&Значение", "Значение");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ПолучитьТекстЗапросаСсылочногоТипа(ИдентификаторМетаданных)

	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Запрос.Операторы.Получить(0);
	
	СхемыЗапросов.ДобавитьИсточник(Оператор, ИдентификаторМетаданных.ПолноеИмя, "Объект");
	СхемыЗапросов.ДобавитьВыбираемоеПоле(Запрос, Оператор, "УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Объект.Ссылка)", "УИД");
	СхемыЗапросов.ДобавитьУсловиеВОператор(Оператор, "Объект.Ссылка = &Ссылка");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

#КонецОбласти

Функция НайтиСсылку(Тип, Идентификатор, ВызыватьИсключение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	&Тип КАК Т
		|ГДЕ
		|	Т.Комментарий ПОДОБНО &Комментарий";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Тип", Тип);
	
	Запрос.УстановитьПараметр("Комментарий", НовыйКомментарий(Идентификатор) + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) 
		И ВызыватьИсключение
		Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти ссылку %1 по идентификатору %2", Тип, Идентификатор);
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
		
КонецФункции

Функция НовыйКомментарий(Идентификатор = "") Экспорт
	
	Результат = "#Тест";
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Результат = Результат + ": " + Идентификатор + "#"
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Служебные

#КонецОбласти

